{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport agent from \"../api/agent\";\nvar initialState = {\n  invoices: [],\n  isFetchingInvoices: false,\n  invoice: undefined,\n  isFetchingInvoiceDetails: false,\n  isSaving: false,\n  isError: false,\n  paymentResult: undefined,\n  selectedPayment: undefined\n};\nexport var createPaymentAsync = createAsyncThunk('invoice/createPaymentAsync', function _callee(payment, thunkAPI) {\n  var bodyFormData;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          bodyFormData = new FormData();\n          bodyFormData.append('invoiceId', payment.invoiceId);\n          bodyFormData.append('file', {\n            uri: payment == null ? void 0 : payment.imageUri,\n            name: 'payment.jpeg',\n            type: 'image/jpeg'\n          });\n          bodyFormData.append('modeOfPaymentId', payment.modeOfPaymentId);\n          bodyFormData.append('amount', \"\" + payment.amount);\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(agent.Invoice.create(bodyFormData));\n\n        case 8:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", thunkAPI.rejectWithValue({\n            error: _context.t0.data\n          }));\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 11]], Promise);\n});\nexport var fetchInvoicesAsync = createAsyncThunk('invoice/fetchInvoicessAsync', function _callee2(id, thunkAPI) {\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(agent.Invoice.list(id));\n\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", thunkAPI.rejectWithValue({\n            error: _context2.t0.data\n          }));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n});\nexport var fetchInvoiceDetailsAsync = createAsyncThunk('invoice/fetchInvoiceDetailsAsync', function _callee3(id, thunkAPI) {\n  return _regeneratorRuntime.async(function _callee3$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(agent.Invoice.details(id));\n\n        case 3:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 6:\n          _context3.prev = 6;\n          _context3.t0 = _context3[\"catch\"](0);\n          return _context3.abrupt(\"return\", thunkAPI.rejectWithValue({\n            error: _context3.t0.data\n          }));\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n});\nexport var invoiceSlice = createSlice({\n  name: 'invoice',\n  initialState: initialState,\n  reducers: {\n    resetPaymentResult: function resetPaymentResult(state) {\n      state.paymentResult = undefined;\n    },\n    setSelectedPayment: function setSelectedPayment(state, action) {\n      state.selectedPayment = action.payload;\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(createPaymentAsync.pending, function (state, action) {\n      state.isSaving = true;\n    });\n    builder.addCase(createPaymentAsync.fulfilled, function (state, action) {\n      state.paymentResult = action.payload;\n      state.isSaving = false;\n    });\n    builder.addCase(createPaymentAsync.rejected, function (state, action) {\n      state.isSaving = false;\n      console.log(action.payload);\n      state.paymentResult = {\n        amount: 10,\n        dateCreated: '',\n        referenceNumber: ''\n      };\n    });\n    builder.addCase(fetchInvoicesAsync.pending, function (state, action) {\n      state.isError = false;\n      state.isFetchingInvoices = true;\n    });\n    builder.addCase(fetchInvoicesAsync.fulfilled, function (state, action) {\n      state.invoices = action.payload;\n      state.isError = false;\n      state.isFetchingInvoices = false;\n    });\n    builder.addCase(fetchInvoicesAsync.rejected, function (state, action) {\n      state.isError = true;\n      state.isFetchingInvoices = false;\n    });\n    builder.addCase(fetchInvoiceDetailsAsync.pending, function (state, action) {\n      state.isError = false;\n      state.isFetchingInvoiceDetails = true;\n    });\n    builder.addCase(fetchInvoiceDetailsAsync.fulfilled, function (state, action) {\n      state.invoice = action.payload;\n      state.isError = false;\n      state.isFetchingInvoiceDetails = false;\n    });\n    builder.addCase(fetchInvoiceDetailsAsync.rejected, function (state, action) {\n      state.isError = true;\n      state.isFetchingInvoiceDetails = false;\n    });\n  }\n});\nvar _invoiceSlice$actions = invoiceSlice.actions,\n    resetPaymentResult = _invoiceSlice$actions.resetPaymentResult,\n    setSelectedPayment = _invoiceSlice$actions.setSelectedPayment;\nexport { resetPaymentResult, setSelectedPayment };","map":{"version":3,"sources":["C:/Users/Alex/Documents/GitHub/maximarket-mobile-ts/src/reducers/invoiceSlice.ts"],"names":["createAsyncThunk","createSlice","agent","initialState","invoices","isFetchingInvoices","invoice","undefined","isFetchingInvoiceDetails","isSaving","isError","paymentResult","selectedPayment","createPaymentAsync","payment","thunkAPI","bodyFormData","FormData","append","invoiceId","uri","imageUri","name","type","modeOfPaymentId","amount","Invoice","create","rejectWithValue","error","data","fetchInvoicesAsync","id","list","fetchInvoiceDetailsAsync","details","invoiceSlice","reducers","resetPaymentResult","state","setSelectedPayment","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","console","log","dateCreated","referenceNumber","actions"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\r\nimport agent from \"../api/agent\";\r\nimport { ICreatePaymentInput, IInvoice, IPaymentResult } from \"../models/Invoice\";\r\nimport { IPayment } from \"../models/Payment\";\r\n\r\nexport interface IInvoiceState {\r\n  invoices: IInvoice[];\r\n  invoice?: IInvoice;\r\n  isFetchingInvoices: boolean;\r\n  isFetchingInvoiceDetails: boolean;\r\n  isSaving: boolean;\r\n  isError: boolean;\r\n  paymentResult?: IPaymentResult;\r\n  selectedPayment?: IPayment;\r\n}\r\n\r\nconst initialState: IInvoiceState = {\r\n  invoices: [],\r\n  isFetchingInvoices: false,\r\n  invoice: undefined,\r\n  isFetchingInvoiceDetails: false,\r\n  isSaving: false,\r\n  isError: false,\r\n  paymentResult: undefined,\r\n  selectedPayment: undefined\r\n}\r\n\r\nexport const createPaymentAsync = createAsyncThunk<IPaymentResult, ICreatePaymentInput>(\r\n  'invoice/createPaymentAsync',\r\n  async (payment, thunkAPI) => {\r\n    try {\r\n      const bodyFormData = new FormData();\r\n      bodyFormData.append('invoiceId', payment.invoiceId);\r\n      // bodyFormData.append('file', payment.file);\r\n      bodyFormData.append('file', { uri: payment?.imageUri, name: 'payment.jpeg', type: 'image/jpeg' } as any)\r\n      bodyFormData.append('modeOfPaymentId', payment.modeOfPaymentId);\r\n      bodyFormData.append('amount', `${payment.amount}`);\r\n      return await agent.Invoice.create(bodyFormData) as any;\r\n    } catch (error: any) {\r\n      return thunkAPI.rejectWithValue({error: error.data})\r\n    }\r\n  }\r\n)\r\n\r\nexport const fetchInvoicesAsync = createAsyncThunk<IInvoice[], string>(\r\n  'invoice/fetchInvoicessAsync',\r\n  async (id, thunkAPI) => {\r\n    try {\r\n      return await agent.Invoice.list(id);\r\n    } catch (error: any) {\r\n      return thunkAPI.rejectWithValue({error: error.data})\r\n    }\r\n  }\r\n)\r\n\r\nexport const fetchInvoiceDetailsAsync = createAsyncThunk<IInvoice, string>(\r\n  'invoice/fetchInvoiceDetailsAsync',\r\n  async (id, thunkAPI) => {\r\n    try {\r\n      return await agent.Invoice.details(id);\r\n    } catch (error: any) {\r\n      return thunkAPI.rejectWithValue({error: error.data})\r\n    }\r\n  }\r\n)\r\n\r\nexport const invoiceSlice = createSlice({\r\n  name: 'invoice',\r\n  initialState,\r\n  reducers: {\r\n    resetPaymentResult(state) {\r\n      state.paymentResult = undefined;\r\n    },\r\n    setSelectedPayment (state, action) {\r\n      state.selectedPayment = action.payload;\r\n    },\r\n  },\r\n\r\n\r\n  extraReducers: (builder => {\r\n\r\n    builder.addCase(createPaymentAsync.pending, (state, action) => {\r\n      state.isSaving = true;\r\n    });\r\n    builder.addCase(createPaymentAsync.fulfilled, (state, action) => {\r\n      state.paymentResult = action.payload;\r\n      state.isSaving = false;\r\n    });\r\n    builder.addCase(createPaymentAsync.rejected, (state, action) => {\r\n        state.isSaving = false;\r\n        console.log(action.payload)\r\n        state.paymentResult = {\r\n          amount: 10,\r\n          dateCreated: '',\r\n          referenceNumber: ''\r\n\r\n        }\r\n    });\r\n\r\n    builder.addCase(fetchInvoicesAsync.pending, (state, action) => {\r\n        state.isError = false;\r\n        state.isFetchingInvoices = true;\r\n    });\r\n    builder.addCase(fetchInvoicesAsync.fulfilled, (state, action) => {\r\n        state.invoices = action.payload;\r\n        state.isError = false;\r\n        state.isFetchingInvoices = false;\r\n    });\r\n    builder.addCase(fetchInvoicesAsync.rejected, (state, action) => {\r\n        state.isError = true;\r\n        state.isFetchingInvoices = false;\r\n    });\r\n\r\n    \r\n    builder.addCase(fetchInvoiceDetailsAsync.pending, (state, action) => {\r\n        state.isError = false;\r\n        state.isFetchingInvoiceDetails = true;\r\n    });\r\n    builder.addCase(fetchInvoiceDetailsAsync.fulfilled, (state, action) => {\r\n        state.invoice = action.payload;\r\n        state.isError = false;\r\n        state.isFetchingInvoiceDetails = false;\r\n    });\r\n    builder.addCase(fetchInvoiceDetailsAsync.rejected, (state, action) => {\r\n        state.isError = true;\r\n        state.isFetchingInvoiceDetails = false;\r\n    });\r\n  })\r\n})\r\n\r\nexport const { resetPaymentResult, setSelectedPayment } = invoiceSlice.actions;"]},"metadata":{},"sourceType":"module"}