{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport RefreshControl from \"react-native-web/dist/exports/RefreshControl\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { fetchSlotDetailsAsync, fetchSlotsAsync } from \"../../reducers/slotSlice\";\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport { currencyFormatter } from \"../../utils/currencyFormatter\";\nimport colors from \"../../styles/colors\";\nimport routes from \"../../navigations/routes\";\nimport { styles } from \"../../styles/styles\";\nimport AppText from \"../../components/text/AppText\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SlotsScreen = function SlotsScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useAppDispatch();\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.slot;\n  }),\n      slots = _useAppSelecter.slots,\n      isFetchingSlots = _useAppSelecter.isFetchingSlots;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      availableSlots = _useState2[0],\n      setAvailableSlots = _useState2[1];\n\n  useEffect(function () {\n    dispatch(fetchSlotsAsync());\n  }, []);\n  useEffect(function () {\n    if (!!slots) {\n      setAvailableSlots(slots.filter(function (i) {\n        return i.status === 0;\n      }));\n    }\n  }, [slots]);\n\n  var handleSlotDetails = function handleSlotDetails(id) {\n    return _regeneratorRuntime.async(function handleSlotDetails$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(fetchSlotDetailsAsync(id)));\n\n          case 2:\n            navigation.navigate(routes.SLOT_DETAILS);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var bg_light = styles.bg_light,\n      bg_dark = styles.bg_dark,\n      container = styles.container,\n      my_5 = styles.my_5,\n      p_5 = styles.p_5,\n      p_15 = styles.p_15,\n      rounded = styles.rounded,\n      row_center_x_between = styles.row_center_x_between;\n  var darkGrey = colors.darkGrey,\n      primary = colors.primary,\n      secondary = colors.secondary;\n  if (isFetchingSlots) return _jsx(LoadingScreen, {});\n  return _jsx(View, {\n    children: _jsx(View, {\n      style: [bg_light, container, p_15, rounded],\n      children: _jsx(FlatList, {\n        ListHeaderComponent: _jsxs(View, {\n          children: [_jsx(View, {\n            style: [bg_dark, container, rounded],\n            children: _jsx(ScrollView, {\n              horizontal: true,\n              showsHorizontalScrollIndicator: false,\n              children: _jsx(View, {\n                children: _jsx(Image, {\n                  resizeMode: \"contain\",\n                  style: {\n                    height: 300,\n                    width: 700\n                  },\n                  source: require(\"../../../assets/images/maximarket-map.png\")\n                })\n              })\n            })\n          }), _jsx(AppText, {\n            as: \"h4\",\n            bold: true,\n            color: darkGrey,\n            children: \"Available Slots\"\n          })]\n        }),\n        showsVerticalScrollIndicator: false,\n        refreshControl: _jsx(RefreshControl, {\n          colors: [secondary, primary],\n          refreshing: isFetchingSlots,\n          onRefresh: function onRefresh() {\n            return dispatch(fetchSlotsAsync());\n          }\n        }),\n        data: availableSlots,\n        keyExtractor: function keyExtractor(a) {\n          return a.id;\n        },\n        renderItem: function renderItem(_ref2) {\n          var item = _ref2.item;\n          return _jsx(TouchableOpacity, {\n            onPress: function onPress() {\n              return handleSlotDetails(item.id);\n            },\n            children: _jsxs(View, {\n              style: [my_5, p_5, row_center_x_between],\n              children: [_jsx(AppText, {\n                as: \"h4\",\n                bold: true,\n                color: primary,\n                children: item.slotNumber\n              }), _jsx(AppText, {\n                as: \"h4\",\n                bold: true,\n                color: primary,\n                children: currencyFormatter(item.price)\n              })]\n            })\n          });\n        }\n      })\n    })\n  });\n};\n\nexport default SlotsScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/slot/SlotsScreen.tsx"],"names":["React","useEffect","useState","fetchSlotDetailsAsync","fetchSlotsAsync","useAppDispatch","useAppSelecter","currencyFormatter","colors","routes","styles","AppText","LoadingScreen","SlotsScreen","navigation","dispatch","state","slot","slots","isFetchingSlots","availableSlots","setAvailableSlots","filter","i","status","handleSlotDetails","id","navigate","SLOT_DETAILS","bg_light","bg_dark","container","my_5","p_5","p_15","rounded","row_center_x_between","darkGrey","primary","secondary","height","width","require","a","item","slotNumber","price"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FlatList, Image, RefreshControl, ScrollView, Text, TouchableOpacity, View } from 'react-native';\n\nimport { fetchSlotDetailsAsync, fetchSlotsAsync } from '../../reducers/slotSlice';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport { currencyFormatter } from '../../utils/currencyFormatter';\nimport colors from '../../styles/colors';\nimport routes from '../../navigations/routes';\nimport { styles } from '../../styles/styles';\nimport { ISlot } from '../../models/Slot';\nimport AppText from '../../components/text/AppText';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\n\ninterface Props {\n    navigation: any\n}\n\nconst SlotsScreen: React.FC<Props> = ({ navigation }) => {\n    const dispatch = useAppDispatch()\n    const { slots, isFetchingSlots } = useAppSelecter(state => state.slot);\n    const [availableSlots, setAvailableSlots] = useState<Array<ISlot>>([])\n\n    useEffect(() => {\n        dispatch(fetchSlotsAsync());\n    }, [])\n\n    useEffect(() => {\n        if (!!slots) {\n            setAvailableSlots(slots.filter(i => i.status === 0));\n        }\n    }, [slots])\n\n    const handleSlotDetails = async (id: string) => {\n        await dispatch(fetchSlotDetailsAsync(id));\n        navigation.navigate(routes.SLOT_DETAILS)\n    }\n\n    const { bg_light, bg_dark, container, my_5, p_5, p_15, rounded, row_center_x_between } = styles\n    const { darkGrey, primary, secondary } = colors\n\n    if (isFetchingSlots) return <LoadingScreen />\n\n    return (\n        <View>\n\n            <View style={[bg_light, container, p_15, rounded]}>\n                <FlatList\n                    ListHeaderComponent={\n                        <View>\n                            <View style={[bg_dark, container, rounded]}>\n                                <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n                                    <View>\n                                        <Image\n                                            resizeMode='contain'\n                                            style={{ height: 300, width: 700 }}\n                                            source={require('../../../assets/images/maximarket-map.png')}\n                                        />\n                                    </View>\n                                </ScrollView>\n                            </View>\n\n                            <AppText as=\"h4\" bold color={darkGrey}>Available Slots</AppText>\n                        </View>\n                    }\n                    showsVerticalScrollIndicator={false}\n                    refreshControl={\n                        <RefreshControl\n                            colors={[secondary, primary]}\n                            refreshing={isFetchingSlots}\n                            onRefresh={() => dispatch(fetchSlotsAsync())} />\n                    }\n                    data={availableSlots}\n                    keyExtractor={(a) => a.id}\n                    renderItem={({ item }) =>\n                        <TouchableOpacity onPress={() => handleSlotDetails(item.id)}>\n                            <View style={[my_5, p_5, row_center_x_between]}>\n                                <AppText as=\"h4\" bold color={primary}>{item.slotNumber}</AppText>\n                                <AppText as=\"h4\" bold color={primary}>{currencyFormatter(item.price!)}</AppText>\n                            </View>\n                        </TouchableOpacity>\n                    }\n                />\n            </View>\n        </View>\n    );\n}\n\nexport default SlotsScreen;"]},"metadata":{},"sourceType":"module"}