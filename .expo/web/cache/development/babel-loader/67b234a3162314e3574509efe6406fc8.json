{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useMemo, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport colors from \"../../styles/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar AppText = function AppText(_ref) {\n  var as = _ref.as,\n      bold = _ref.bold,\n      children = _ref.children,\n      color = _ref.color,\n      italic = _ref.italic;\n\n  var _useState = useState(15),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontSize = _useState2[0],\n      setFontSize = _useState2[1];\n\n  useEffect(function () {\n    switch (as) {\n      case 'h5':\n        setFontSize(12);\n        break;\n\n      case 'h4':\n        setFontSize(15);\n        break;\n\n      case 'h3':\n        setFontSize(18);\n        break;\n\n      case 'h2':\n        setFontSize(25);\n        break;\n\n      case 'h1':\n        setFontSize(30);\n        break;\n\n      case 'title':\n        setFontSize(50);\n        break;\n    }\n  }, [as]);\n  var fontWeight = useMemo(function () {\n    return bold ? 'bold' : 'normal';\n  }, [bold]);\n  var fontStyle = useMemo(function () {\n    return italic ? 'italic' : 'normal';\n  }, [italic]);\n  var textColor = useMemo(function () {\n    return color ? color : colors.dark;\n  }, [color]);\n  return _jsx(Text, {\n    style: {\n      color: textColor,\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontStyle: fontStyle,\n      paddingVertical: 2.5\n    },\n    children: children\n  });\n};\n\nexport default AppText;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/components/text/AppText.tsx"],"names":["React","useEffect","useMemo","useState","colors","AppText","as","bold","children","color","italic","fontSize","setFontSize","fontWeight","fontStyle","textColor","dark","paddingVertical"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,OAA3B,EAAoCC,QAApC,QAAoD,OAApD;;AAEA,OAAOC,MAAP;;;AAUA,IAAMC,OAAwB,GAAG,SAA3BA,OAA2B,OAA2C;AAAA,MAAxCC,EAAwC,QAAxCA,EAAwC;AAAA,MAApCC,IAAoC,QAApCA,IAAoC;AAAA,MAA9BC,QAA8B,QAA9BA,QAA8B;AAAA,MAApBC,KAAoB,QAApBA,KAAoB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AACxE,kBAAgCP,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOQ,QAAP;AAAA,MAAiBC,WAAjB;;AAEAX,EAAAA,SAAS,CAAC,YAAM;AACZ,YAAQK,EAAR;AACI,WAAK,IAAL;AACIM,QAAAA,WAAW,CAAC,EAAD,CAAX;AACA;;AACJ,WAAK,IAAL;AACIA,QAAAA,WAAW,CAAC,EAAD,CAAX;AACA;;AACJ,WAAK,IAAL;AACIA,QAAAA,WAAW,CAAC,EAAD,CAAX;AACA;;AACJ,WAAK,IAAL;AACIA,QAAAA,WAAW,CAAC,EAAD,CAAX;AACA;;AACJ,WAAK,IAAL;AACIA,QAAAA,WAAW,CAAC,EAAD,CAAX;AACA;;AACJ,WAAK,OAAL;AACIA,QAAAA,WAAW,CAAC,EAAD,CAAX;AACA;AAlBR;AAoBH,GArBQ,EAqBN,CAACN,EAAD,CArBM,CAAT;AAuBA,MAAMO,UAAU,GAAGX,OAAO,CAAC;AAAA,WAAOK,IAAI,GAAG,MAAH,GAAY,QAAvB;AAAA,GAAD,EAAmC,CAACA,IAAD,CAAnC,CAA1B;AACA,MAAMO,SAAS,GAAGZ,OAAO,CAAC;AAAA,WAAOQ,MAAM,GAAG,QAAH,GAAc,QAA3B;AAAA,GAAD,EAAuC,CAACA,MAAD,CAAvC,CAAzB;AACA,MAAMK,SAAS,GAAGb,OAAO,CAAC;AAAA,WAAMO,KAAK,GAAGA,KAAH,GAAWL,MAAM,CAACY,IAA7B;AAAA,GAAD,EAAoC,CAACP,KAAD,CAApC,CAAzB;AAEA,SACI,KAAC,IAAD;AACI,IAAA,KAAK,EAAE;AACHA,MAAAA,KAAK,EAAEM,SADJ;AAEHJ,MAAAA,QAAQ,EAAEA,QAFP;AAGHE,MAAAA,UAAU,EAAEA,UAHT;AAIHC,MAAAA,SAAS,EAAEA,SAJR;AAKHG,MAAAA,eAAe,EAAE;AALd,KADX;AAAA,cASKT;AATL,IADJ;AAaH,CA3CD;;AA6CA,eAAeH,OAAf","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { Text } from 'react-native';\nimport colors from '../../styles/colors';\n\ninterface Props {\n    as: string,\n    bold?: boolean,\n    children: React.ReactNode,\n    color?: string\n    italic?: string\n}\n\nconst AppText: React.FC<Props> = ({ as, bold, children, color, italic }) => {\n    const [fontSize, setFontSize] = useState(15);\n\n    useEffect(() => {\n        switch (as) {\n            case 'h5':\n                setFontSize(12);\n                break;\n            case 'h4':\n                setFontSize(15);\n                break;\n            case 'h3':\n                setFontSize(18);\n                break;\n            case 'h2':\n                setFontSize(25);\n                break;\n            case 'h1':\n                setFontSize(30);\n                break;\n            case 'title':\n                setFontSize(50);\n                break;\n        }\n    }, [as]);\n\n    const fontWeight = useMemo(() => (bold ? 'bold' : 'normal'), [bold]);\n    const fontStyle = useMemo(() => (italic ? 'italic' : 'normal'), [italic]);\n    const textColor = useMemo(() => color ? color : colors.dark, [color])\n\n    return (\n        <Text\n            style={{\n                color: textColor,\n                fontSize: fontSize,\n                fontWeight: fontWeight,\n                fontStyle: fontStyle,\n                paddingVertical: 2.5,\n            }}\n        >\n            {children}\n        </Text>\n    );\n}\n\nexport default AppText;"]},"metadata":{},"sourceType":"module"}