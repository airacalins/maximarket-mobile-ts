{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport AppText from \"../../components/text/AppText\";\nimport routes from \"../../navigations/routes\";\nimport { fetchSlotDetailsAsync, fetchSlotsAsync } from \"../../reducers/slotSlice\";\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar SlotsScreen = function SlotsScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useAppDispatch();\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.slot;\n  }),\n      slots = _useAppSelecter.slots,\n      isFetchingSlots = _useAppSelecter.isFetchingSlots;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      availableSlots = _useState2[0],\n      setAvailableSlots = _useState2[1];\n\n  useEffect(function () {\n    dispatch(fetchSlotsAsync());\n  }, []);\n  useEffect(function () {\n    if (!!slots) {\n      setAvailableSlots(slots.filter(function (i) {\n        return i.status === 0;\n      }));\n    }\n  }, [slots]);\n\n  var handleSlotDetails = function handleSlotDetails(id) {\n    return _regeneratorRuntime.async(function handleSlotDetails$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            navigation.navigate(routes.SLOT_DETAILS);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(dispatch(fetchSlotDetailsAsync(id)));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var bg_light = styles.bg_light,\n      container = styles.container,\n      flex_1 = styles.flex_1,\n      mb_25 = styles.mb_25,\n      mx_15 = styles.mx_15,\n      my_5 = styles.my_5,\n      p_15 = styles.p_15,\n      px_15 = styles.px_15,\n      rounded = styles.rounded,\n      row_center_x_between = styles.row_center_x_between;\n  var darkGrey = colors.darkGrey,\n      primary = colors.primary;\n  if (isFetchingSlots) return _jsx(LoadingScreen, {});\n  return _jsxs(View, {\n    children: [_jsx(View, {\n      style: [bg_light, container, px_15, rounded],\n      children: _jsx(ScrollView, {\n        horizontal: true,\n        showsHorizontalScrollIndicator: false,\n        children: _jsx(View, {\n          children: _jsx(Image, {\n            resizeMode: \"contain\",\n            style: {\n              height: 300,\n              width: 700\n            },\n            source: require(\"../../../assets/images/maximarket-map.png\")\n          })\n        })\n      })\n    }), _jsxs(View, {\n      children: [_jsx(View, {\n        style: mx_15,\n        children: _jsx(AppText, {\n          as: \"h4\",\n          bold: true,\n          color: darkGrey,\n          children: \"Available Slots\"\n        })\n      }), _jsx(View, {\n        style: [bg_light, mx_15, my_5, p_15, rounded, row_center_x_between],\n        children: _jsx(FlatList, {\n          data: availableSlots,\n          keyExtractor: function keyExtractor(a) {\n            return a.id;\n          },\n          renderItem: function renderItem(_ref2) {\n            var item = _ref2.item;\n            return _jsx(TouchableOpacity, {\n              onPress: function onPress() {\n                return handleSlotDetails(item.id);\n              },\n              children: _jsxs(View, {\n                style: [bg_light, mx_15, my_5, p_15, rounded, row_center_x_between],\n                children: [_jsx(AppText, {\n                  as: \"h4\",\n                  bold: true,\n                  color: primary,\n                  children: item.slotNumber\n                }), _jsx(AppText, {\n                  as: \"h4\",\n                  bold: true,\n                  color: primary,\n                  children: item.price\n                })]\n              })\n            });\n          }\n        })\n      })]\n    })]\n  });\n};\n\nexport default SlotsScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/slot/SlotsScreen.tsx"],"names":["React","useEffect","useState","LoadingScreen","AppText","routes","fetchSlotDetailsAsync","fetchSlotsAsync","useAppDispatch","useAppSelecter","colors","styles","SlotsScreen","navigation","dispatch","state","slot","slots","isFetchingSlots","availableSlots","setAvailableSlots","filter","i","status","handleSlotDetails","id","navigate","SLOT_DETAILS","bg_light","container","flex_1","mb_25","mx_15","my_5","p_15","px_15","rounded","row_center_x_between","darkGrey","primary","height","width","require","a","item","slotNumber","price"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { FlatList, Image, ScrollView, Text, TouchableOpacity, View } from 'react-native';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport AppText from '../../components/text/AppText';\nimport { ISlot } from '../../models/Slot';\nimport routes from '../../navigations/routes';\nimport { fetchSlotDetailsAsync, fetchSlotsAsync } from '../../reducers/slotSlice';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\n\ninterface Props {\n    navigation: any\n}\n\nconst SlotsScreen: React.FC<Props> = ({ navigation }) => {\n    const dispatch = useAppDispatch()\n    const { slots, isFetchingSlots } = useAppSelecter(state => state.slot);\n    const [availableSlots, setAvailableSlots] = useState<Array<ISlot>>([])\n\n    useEffect(() => {\n        dispatch(fetchSlotsAsync());\n    }, [])\n\n    useEffect(() => {\n        if (!!slots) {\n            setAvailableSlots(slots.filter(i => i.status === 0));\n        }\n    }, [slots])\n\n    const handleSlotDetails = async (id: string) => {\n        navigation.navigate(routes.SLOT_DETAILS)\n        await dispatch(fetchSlotDetailsAsync(id));\n    }\n\n    const { bg_light, container, flex_1, mb_25, mx_15, my_5, p_15, px_15, rounded, row_center_x_between } = styles\n    const { darkGrey, primary } = colors\n\n    if (isFetchingSlots) return <LoadingScreen />\n\n    return (\n        <View>\n            <View style={[bg_light, container, px_15, rounded]}>\n                <ScrollView horizontal showsHorizontalScrollIndicator={false}>\n                    <View>\n                        <Image\n                            resizeMode='contain'\n                            style={{ height: 300, width: 700 }}\n                            source={require('../../../assets/images/maximarket-map.png')}\n                        />\n                    </View>\n                </ScrollView>\n            </View>\n\n            <View>\n                <View style={mx_15}>\n                    <AppText as=\"h4\" bold color={darkGrey}>Available Slots</AppText>\n                </View>\n\n                <View style={[bg_light, mx_15, my_5, p_15, rounded, row_center_x_between]}>\n                    <FlatList\n                        data={availableSlots}\n                        keyExtractor={(a) => a.id}\n                        renderItem={({ item }) =>\n                            <TouchableOpacity onPress={() => handleSlotDetails(item.id)}>\n                                <View style={[bg_light, mx_15, my_5, p_15, rounded, row_center_x_between]}>\n                                    <AppText as=\"h4\" bold color={primary}>{item.slotNumber}</AppText>\n                                    <AppText as=\"h4\" bold color={primary}>{item.price}</AppText>\n                                </View>\n                            </TouchableOpacity>\n                        }\n                    />\n                </View>\n            </View>\n        </View>\n    );\n}\n\nexport default SlotsScreen;"]},"metadata":{},"sourceType":"module"}