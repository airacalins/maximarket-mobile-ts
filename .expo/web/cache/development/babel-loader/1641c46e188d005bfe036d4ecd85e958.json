{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { announcementSlice } from \"../reducers/announcementSlice\";\nimport { modeOfPaymentSlice } from \"../reducers/modeOfPaymentSlice\";\nimport { tenantSlice } from \"../reducers/tenantSlice\";\nexport var store = configureStore({\n  reducer: {\n    announcement: announcementSlice.reducer,\n    modeOfPayment: modeOfPaymentSlice.reducer,\n    tenant: tenantSlice.reducer\n  }\n});\nexport var useAppDispatch = function useAppDispatch() {\n  return useDispatch();\n};\nexport var useAppSelecter = useSelector;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/store/configureStore.ts"],"names":["configureStore","useDispatch","useSelector","announcementSlice","modeOfPaymentSlice","tenantSlice","store","reducer","announcement","modeOfPayment","tenant","useAppDispatch","useAppSelecter"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAA+BC,WAA/B,EAA4CC,WAA5C,QAA+D,aAA/D;AAEA,SAASC,iBAAT;AACA,SAASC,kBAAT;AACA,SAASC,WAAT;AAGA,OAAO,IAAMC,KAAK,GAAGN,cAAc,CAAC;AAClCO,EAAAA,OAAO,EAAE;AACPC,IAAAA,YAAY,EAAEL,iBAAiB,CAACI,OADzB;AAGPE,IAAAA,aAAa,EAAEL,kBAAkB,CAACG,OAH3B;AAKPG,IAAAA,MAAM,EAAEL,WAAW,CAACE;AALb;AADyB,CAAD,CAA5B;AAcP,OAAO,IAAMI,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAMV,WAAW,EAAjB;AAAA,CAAvB;AACP,OAAO,IAAMW,cAA+C,GAAGV,WAAxD","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\n\nimport { announcementSlice } from '../reducers/announcementSlice';\nimport { modeOfPaymentSlice } from '../reducers/modeOfPaymentSlice';\nimport { tenantSlice } from '../reducers/tenantSlice';\n\n\nexport const store = configureStore({\n  reducer: {\n    announcement: announcementSlice.reducer,\n    // invoice: invoiceSlice.reducer,\n    modeOfPayment: modeOfPaymentSlice.reducer,\n    // slot: slotSlice.reducer,\n    tenant: tenantSlice.reducer,\n  }\n})\n\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelecter: TypedUseSelectorHook<RootState> = useSelector;"]},"metadata":{},"sourceType":"module"}