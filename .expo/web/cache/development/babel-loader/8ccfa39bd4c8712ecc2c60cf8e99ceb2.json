{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport routes from \"../../navigations/routes\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useDispatch } from 'react-redux';\nimport { fetchAnnouncementDetailsAsync, fetchAnnouncementsAsync } from \"../../reducers/announcementSlice\";\nimport { useAppSelecter } from \"../../store/configureStore\";\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport { dateFormatter } from \"../../utils/dateFormatter\";\nimport AppText from \"../../components/text/AppText\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport NoData from \"../../components/indicator/NoData\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AnnouncementsScreen = function AnnouncementsScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.announcement;\n  }),\n      announcements = _useAppSelecter.announcements,\n      isFetchingAnnouncements = _useAppSelecter.isFetchingAnnouncements;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    dispatch(fetchAnnouncementsAsync());\n  }, []);\n\n  var handleAnnouncementDetails = function handleAnnouncementDetails(id) {\n    return _regeneratorRuntime.async(function handleAnnouncementDetails$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(fetchAnnouncementDetailsAsync(id)));\n\n          case 2:\n            navigation.navigate(routes.ANNOUNCEMENT_DETAILS);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var bg_light = styles.bg_light,\n      container = styles.container,\n      my_5 = styles.my_5,\n      p_15 = styles.p_15,\n      rounded = styles.rounded;\n  var darkGrey = colors.darkGrey;\n  if (isFetchingAnnouncements) return _jsx(LoadingScreen, {});\n  if (!announcements) return _jsx(NoData, {});\n  return _jsx(View, {\n    style: container,\n    children: _jsx(FlatList, {\n      data: announcements,\n      keyExtractor: function keyExtractor(a) {\n        return a.id;\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleAnnouncementDetails(item.id);\n          },\n          children: _jsxs(View, {\n            style: [bg_light, my_5, p_15, rounded],\n            children: [_jsx(AppText, {\n              as: \"h4\",\n              bold: true,\n              children: item.title\n            }), _jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              color: darkGrey,\n              children: dateFormatter(item.dateCreated)\n            })]\n          })\n        });\n      }\n    })\n  });\n};\n\nexport default AnnouncementsScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/announcement/AnouncementsScreen.tsx"],"names":["React","useEffect","routes","useDispatch","fetchAnnouncementDetailsAsync","fetchAnnouncementsAsync","useAppSelecter","colors","styles","dateFormatter","AppText","LoadingScreen","NoData","AnnouncementsScreen","navigation","state","announcement","announcements","isFetchingAnnouncements","dispatch","handleAnnouncementDetails","id","navigate","ANNOUNCEMENT_DETAILS","bg_light","container","my_5","p_15","rounded","darkGrey","a","item","title","dateCreated"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP;;;;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,6BAAT,EAAwCC,uBAAxC;AACA,SAASC,cAAT;AACA,OAAOC,MAAP;AACA,SAASC,MAAT;AACA,SAASC,aAAT;AACA,OAAOC,OAAP;AACA,OAAOC,aAAP;AACA,OAAOC,MAAP;;;;AAMA,IAAMC,mBAAoC,GAAG,SAAvCA,mBAAuC,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAC7D,wBAAmDR,cAAc,CAAC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACC,YAAjB;AAAA,GAAD,CAAjE;AAAA,MAAQC,aAAR,mBAAQA,aAAR;AAAA,MAAuBC,uBAAvB,mBAAuBA,uBAAvB;;AACA,MAAMC,QAAQ,GAAGhB,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACZkB,IAAAA,QAAQ,CAACd,uBAAuB,EAAxB,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMe,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACxBF,QAAQ,CAACf,6BAA6B,CAACiB,EAAD,CAA9B,CADgB;;AAAA;AAE9BP,YAAAA,UAAU,CAACQ,QAAX,CAAoBpB,MAAM,CAACqB,oBAA3B;;AAF8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlC;;AAKA,MAAQC,QAAR,GAAqDhB,MAArD,CAAQgB,QAAR;AAAA,MAAkBC,SAAlB,GAAqDjB,MAArD,CAAkBiB,SAAlB;AAAA,MAA6BC,IAA7B,GAAqDlB,MAArD,CAA6BkB,IAA7B;AAAA,MAAmCC,IAAnC,GAAqDnB,MAArD,CAAmCmB,IAAnC;AAAA,MAAyCC,OAAzC,GAAqDpB,MAArD,CAAyCoB,OAAzC;AACA,MAAQC,QAAR,GAAqBtB,MAArB,CAAQsB,QAAR;AAEA,MAAIX,uBAAJ,EAA6B,OAAO,KAAC,aAAD,KAAP;AAC7B,MAAI,CAACD,aAAL,EAAoB,OAAO,KAAC,MAAD,KAAP;AAEpB,SACI,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEQ,SAAb;AAAA,cACI,KAAC,QAAD;AACI,MAAA,IAAI,EAAER,aADV;AAEI,MAAA,YAAY,EAAE,sBAACa,CAAD;AAAA,eAAOA,CAAC,CAACT,EAAT;AAAA,OAFlB;AAGI,MAAA,UAAU,EAAE;AAAA,YAAGU,IAAH,SAAGA,IAAH;AAAA,eACR,KAAC,gBAAD;AAAkB,UAAA,OAAO,EAAE;AAAA,mBAAMX,yBAAyB,CAACW,IAAI,CAACV,EAAN,CAA/B;AAAA,WAA3B;AAAA,oBACI,MAAC,IAAD;AAAM,YAAA,KAAK,EAAE,CAACG,QAAD,EAAWE,IAAX,EAAiBC,IAAjB,EAAuBC,OAAvB,CAAb;AAAA,uBACI,KAAC,OAAD;AAAS,cAAA,EAAE,EAAC,IAAZ;AAAiB,cAAA,IAAI,MAArB;AAAA,wBAAuBG,IAAI,CAACC;AAA5B,cADJ,EAEI,KAAC,OAAD;AAAS,cAAA,EAAE,EAAC,IAAZ;AAAiB,cAAA,IAAI,MAArB;AAAsB,cAAA,KAAK,EAAEH,QAA7B;AAAA,wBAAwCpB,aAAa,CAACsB,IAAI,CAACE,WAAN;AAArD,cAFJ;AAAA;AADJ,UADQ;AAAA;AAHhB;AADJ,IADJ;AAgBH,CAnCD;;AAqCA,eAAepB,mBAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport routes from '../../navigations/routes';\nimport { FlatList, TouchableOpacity, View } from 'react-native';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchAnnouncementDetailsAsync, fetchAnnouncementsAsync } from '../../reducers/announcementSlice';\nimport { useAppSelecter } from '../../store/configureStore';\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport { dateFormatter } from '../../utils/dateFormatter';\nimport AppText from '../../components/text/AppText';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport NoData from '../../components/indicator/NoData';\n\ninterface Props {\n    navigation: any\n}\n\nconst AnnouncementsScreen: React.FC<Props> = ({ navigation }) => {\n    const { announcements, isFetchingAnnouncements } = useAppSelecter((state) => state.announcement)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchAnnouncementsAsync());\n    }, [])\n\n    const handleAnnouncementDetails = async (id: string) => {\n        await dispatch(fetchAnnouncementDetailsAsync(id));\n        navigation.navigate(routes.ANNOUNCEMENT_DETAILS)\n    }\n\n    const { bg_light, container, my_5, p_15, rounded } = styles\n    const { darkGrey } = colors\n\n    if (isFetchingAnnouncements) return <LoadingScreen />\n    if (!announcements) return <NoData />\n\n    return (\n        <View style={container}>\n            <FlatList\n                data={announcements}\n                keyExtractor={(a) => a.id}\n                renderItem={({ item }) =>\n                    <TouchableOpacity onPress={() => handleAnnouncementDetails(item.id)}>\n                        <View style={[bg_light, my_5, p_15, rounded,]}>\n                            <AppText as='h4' bold>{item.title}</AppText>\n                            <AppText as='h5' bold color={darkGrey}>{dateFormatter(item.dateCreated)}</AppText>\n                        </View>\n                    </TouchableOpacity>\n                }\n            />\n        </View>\n    );\n}\n\nexport default AnnouncementsScreen;"]},"metadata":{},"sourceType":"module"}