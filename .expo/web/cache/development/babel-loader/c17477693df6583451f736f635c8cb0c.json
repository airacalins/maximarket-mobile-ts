{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { announcementSlice } from \"../reducers/announcementSlice\";\nimport { invoiceSlice } from \"../reducers/invoiceSlice\";\nimport { modeOfPaymentSlice } from \"../reducers/modeOfPaymentSlice\";\nimport { slotSlice } from \"../reducers/slotSlice\";\nimport { tenantSlice } from \"../reducers/tenantSlice\";\nexport var store = configureStore({\n  reducer: {\n    announcement: announcementSlice.reducer,\n    invoice: invoiceSlice.reducer,\n    modeOfPayment: modeOfPaymentSlice.reducer,\n    slot: slotSlice.reducer,\n    tenant: tenantSlice.reducer\n  }\n});\nexport var useAppDispatch = function useAppDispatch() {\n  return useDispatch();\n};\nexport var useAppSelecter = useSelector;","map":{"version":3,"sources":["C:/Users/Alex/Documents/GitHub/maximarket-mobile-ts/src/store/configureStore.ts"],"names":["configureStore","useDispatch","useSelector","announcementSlice","invoiceSlice","modeOfPaymentSlice","slotSlice","tenantSlice","store","reducer","announcement","invoice","modeOfPayment","slot","tenant","useAppDispatch","useAppSelecter"],"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAA+BC,WAA/B,EAA4CC,WAA5C,QAA+D,aAA/D;AAEA,SAASC,iBAAT;AACA,SAASC,YAAT;AACA,SAASC,kBAAT;AACA,SAASC,SAAT;AACA,SAASC,WAAT;AAGA,OAAO,IAAMC,KAAK,GAAGR,cAAc,CAAC;AAClCS,EAAAA,OAAO,EAAE;AACPC,IAAAA,YAAY,EAAEP,iBAAiB,CAACM,OADzB;AAEPE,IAAAA,OAAO,EAAEP,YAAY,CAACK,OAFf;AAGPG,IAAAA,aAAa,EAAEP,kBAAkB,CAACI,OAH3B;AAIPI,IAAAA,IAAI,EAAEP,SAAS,CAACG,OAJT;AAKPK,IAAAA,MAAM,EAAEP,WAAW,CAACE;AALb;AADyB,CAAD,CAA5B;AAcP,OAAO,IAAMM,cAAc,GAAG,SAAjBA,cAAiB;AAAA,SAAMd,WAAW,EAAjB;AAAA,CAAvB;AACP,OAAO,IAAMe,cAA+C,GAAGd,WAAxD","sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\n\r\nimport { announcementSlice } from '../reducers/announcementSlice';\r\nimport { invoiceSlice } from '../reducers/invoiceSlice';\r\nimport { modeOfPaymentSlice } from '../reducers/modeOfPaymentSlice';\r\nimport { slotSlice } from '../reducers/slotSlice';\r\nimport { tenantSlice } from '../reducers/tenantSlice';\r\n\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    announcement: announcementSlice.reducer,\r\n    invoice: invoiceSlice.reducer,\r\n    modeOfPayment: modeOfPaymentSlice.reducer,\r\n    slot: slotSlice.reducer,\r\n    tenant: tenantSlice.reducer,\r\n  }\r\n})\r\n\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppDispatch = typeof store.dispatch;\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelecter: TypedUseSelectorHook<RootState> = useSelector;"]},"metadata":{},"sourceType":"module"}