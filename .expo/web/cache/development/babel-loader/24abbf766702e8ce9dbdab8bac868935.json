{"ast":null,"code":"import React, { useEffect } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useDispatch } from 'react-redux';\nimport { fetchAnnouncementsAsync } from \"../../reducers/announcementSlice\";\nimport { useAppSelecter } from \"../../store/configureStore\";\nimport routes from \"../../navigations/routes\";\nimport { styles } from \"../../styles/styles\";\nimport colors from \"../../styles/colors\";\nimport AppText from \"../../components/text/AppText\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport NoData from \"../../components/indicator/NoData\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AnnouncementsScreen = function AnnouncementsScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var _useAppSelecter2 = useAppSelecter(function (state) {\n    return state.announcement;\n  }),\n      announcements = _useAppSelecter2.announcements,\n      isFetchingAnnouncements = _useAppSelecter2.isFetchingAnnouncements;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (!tenant) navigation.navigate(\"AuthNavigator\");\n  }, [tenant]);\n  useEffect(function () {\n    dispatch(fetchAnnouncementsAsync());\n  }, []);\n  var bg_light = styles.bg_light,\n      container = styles.container,\n      my_5 = styles.my_5,\n      p_15 = styles.p_15,\n      rounded = styles.rounded;\n  var darkGrey = colors.darkGrey;\n  if (isFetchingAnnouncements) return _jsx(LoadingScreen, {});\n  if (!announcements) return _jsx(NoData, {});\n  return _jsx(View, {\n    style: container,\n    children: _jsx(FlatList, {\n      data: announcements,\n      keyExtractor: function keyExtractor(a) {\n        return a.id;\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return navigation.navigate(routes.ANNOUNCEMENT_DETAILS, {\n              announcementId: item.id\n            });\n          },\n          children: _jsxs(View, {\n            style: [bg_light, my_5, p_15, rounded],\n            children: [_jsx(AppText, {\n              as: \"h4\",\n              bold: true,\n              children: item.title\n            }), _jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              color: darkGrey,\n              children: item.dateCreated\n            })]\n          })\n        });\n      }\n    })\n  });\n};\n\nexport default AnnouncementsScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/announcement/AnouncementsScreen.tsx"],"names":["React","useEffect","useDispatch","fetchAnnouncementsAsync","useAppSelecter","routes","styles","colors","AppText","LoadingScreen","NoData","AnnouncementsScreen","navigation","state","tenant","announcement","announcements","isFetchingAnnouncements","dispatch","navigate","bg_light","container","my_5","p_15","rounded","darkGrey","a","id","item","ANNOUNCEMENT_DETAILS","announcementId","title","dateCreated"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,SAASC,uBAAT;AACA,SAASC,cAAT;AACA,OAAOC,MAAP;AACA,SAASC,MAAT;AACA,OAAOC,MAAP;AACA,OAAOC,OAAP;AACA,OAAOC,aAAP;AACA,OAAOC,MAAP;;;;AAOA,IAAMC,mBAAoC,GAAG,SAAvCA,mBAAuC,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;;AAC7D,wBAAmBR,cAAc,CAAC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACC,MAAjB;AAAA,GAAD,CAAjC;AAAA,MAAQA,MAAR,mBAAQA,MAAR;;AACA,yBAAmDV,cAAc,CAAC,UAACS,KAAD;AAAA,WAAWA,KAAK,CAACE,YAAjB;AAAA,GAAD,CAAjE;AAAA,MAAQC,aAAR,oBAAQA,aAAR;AAAA,MAAuBC,uBAAvB,oBAAuBA,uBAAvB;;AACA,MAAMC,QAAQ,GAAGhB,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACa,MAAL,EAAaF,UAAU,CAACO,QAAX,CAAoB,eAApB;AAChB,GAFQ,EAEN,CAACL,MAAD,CAFM,CAAT;AAIAb,EAAAA,SAAS,CAAC,YAAM;AACZiB,IAAAA,QAAQ,CAACf,uBAAuB,EAAxB,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAQiB,QAAR,GAAqDd,MAArD,CAAQc,QAAR;AAAA,MAAkBC,SAAlB,GAAqDf,MAArD,CAAkBe,SAAlB;AAAA,MAA6BC,IAA7B,GAAqDhB,MAArD,CAA6BgB,IAA7B;AAAA,MAAmCC,IAAnC,GAAqDjB,MAArD,CAAmCiB,IAAnC;AAAA,MAAyCC,OAAzC,GAAqDlB,MAArD,CAAyCkB,OAAzC;AACA,MAAQC,QAAR,GAAqBlB,MAArB,CAAQkB,QAAR;AAEA,MAAIR,uBAAJ,EAA6B,OAAO,KAAC,aAAD,KAAP;AAE7B,MAAI,CAACD,aAAL,EAAoB,OAAO,KAAC,MAAD,KAAP;AAEpB,SACI,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEK,SAAb;AAAA,cACI,KAAC,QAAD;AACI,MAAA,IAAI,EAAEL,aADV;AAEI,MAAA,YAAY,EAAE,sBAACU,CAAD;AAAA,eAAOA,CAAC,CAACC,EAAT;AAAA,OAFlB;AAGI,MAAA,UAAU,EAAE;AAAA,YAAGC,IAAH,SAAGA,IAAH;AAAA,eACR,KAAC,gBAAD;AAAkB,UAAA,OAAO,EAAE;AAAA,mBAAMhB,UAAU,CAACO,QAAX,CAAoBd,MAAM,CAACwB,oBAA3B,EAAiD;AAAEC,cAAAA,cAAc,EAAEF,IAAI,CAACD;AAAvB,aAAjD,CAAN;AAAA,WAA3B;AAAA,oBACI,MAAC,IAAD;AAAM,YAAA,KAAK,EAAE,CAACP,QAAD,EAAWE,IAAX,EAAiBC,IAAjB,EAAuBC,OAAvB,CAAb;AAAA,uBACI,KAAC,OAAD;AAAS,cAAA,EAAE,EAAC,IAAZ;AAAiB,cAAA,IAAI,MAArB;AAAA,wBAAuBI,IAAI,CAACG;AAA5B,cADJ,EAEI,KAAC,OAAD;AAAS,cAAA,EAAE,EAAC,IAAZ;AAAiB,cAAA,IAAI,MAArB;AAAsB,cAAA,KAAK,EAAEN,QAA7B;AAAA,wBAAwCG,IAAI,CAACI;AAA7C,cAFJ;AAAA;AADJ,UADQ;AAAA;AAHhB;AADJ,IADJ;AAgBH,CApCD;;AAsCA,eAAerB,mBAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { FlatList, TouchableOpacity, View } from 'react-native';\nimport { useDispatch } from 'react-redux';\n\nimport { fetchAnnouncementsAsync } from '../../reducers/announcementSlice';\nimport { useAppSelecter } from '../../store/configureStore';\nimport routes from '../../navigations/routes';\nimport { styles } from '../../styles/styles';\nimport colors from '../../styles/colors';\nimport AppText from '../../components/text/AppText';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport NoData from '../../components/indicator/NoData';\n\n\ninterface Props {\n    navigation: any\n}\n\nconst AnnouncementsScreen: React.FC<Props> = ({ navigation }) => {\n    const { tenant } = useAppSelecter((state) => state.tenant)\n    const { announcements, isFetchingAnnouncements } = useAppSelecter((state) => state.announcement)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (!tenant) navigation.navigate(\"AuthNavigator\")\n    }, [tenant])\n\n    useEffect(() => {\n        dispatch(fetchAnnouncementsAsync());\n    }, [])\n\n    const { bg_light, container, my_5, p_15, rounded } = styles\n    const { darkGrey } = colors\n\n    if (isFetchingAnnouncements) return <LoadingScreen />\n\n    if (!announcements) return <NoData />\n\n    return (\n        <View style={container}>\n            <FlatList\n                data={announcements}\n                keyExtractor={(a) => a.id}\n                renderItem={({ item }) =>\n                    <TouchableOpacity onPress={() => navigation.navigate(routes.ANNOUNCEMENT_DETAILS, { announcementId: item.id })}>\n                        <View style={[bg_light, my_5, p_15, rounded,]}>\n                            <AppText as='h4' bold>{item.title}</AppText>\n                            <AppText as='h5' bold color={darkGrey}>{item.dateCreated}</AppText>\n                        </View>\n                    </TouchableOpacity>\n                }\n            />\n        </View>\n    );\n}\n\nexport default AnnouncementsScreen;"]},"metadata":{},"sourceType":"module"}