{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport agent from \"../api/agent\";\nvar initialState = {\n  modeOfPayments: [],\n  modeOfPayment: undefined,\n  isFetchingModeOfPayments: false,\n  isFetchingModeOfPaymentDetails: false,\n  isSaving: false,\n  errorMessage: \"\"\n};\nexport var fetchModeOfPaymentsAsync = createAsyncThunk('modeOfPayments/fetchModeOfPaymentsAsync', function _callee(_, thunkAPI) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(agent.ModeOfPayment.list());\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", thunkAPI.rejectWithValue({\n            error: _context.t0.data\n          }));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n});\nexport var modeOfPaymentSlice = createSlice({\n  name: 'modeOfPayment',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchModeOfPaymentsAsync.pending, function (state, action) {\n      state.isFetchingModeOfPayments = true;\n    });\n    builder.addCase(fetchModeOfPaymentsAsync.fulfilled, function (state, action) {\n      state.modeOfPayments = action.payload;\n      state.isFetchingModeOfPayments = false;\n    });\n    builder.addCase(fetchModeOfPaymentsAsync.rejected, function (state, action) {\n      state.errorMessage = action.payload;\n      state.isFetchingModeOfPayments = false;\n    });\n  }\n});\n\n_objectDestructuringEmpty(modeOfPaymentSlice.actions);\n\nexport {};","map":{"version":3,"sources":["C:/Users/Alex/Documents/GitHub/maximarket-mobile-ts/src/reducers/modeOfPaymentSlice.ts"],"names":["createAsyncThunk","createSlice","agent","initialState","modeOfPayments","modeOfPayment","undefined","isFetchingModeOfPayments","isFetchingModeOfPaymentDetails","isSaving","errorMessage","fetchModeOfPaymentsAsync","_","thunkAPI","ModeOfPayment","list","rejectWithValue","error","data","modeOfPaymentSlice","name","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","rejected","actions"],"mappings":";;AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP;AAYA,IAAMC,YAAiC,GAAG;AACxCC,EAAAA,cAAc,EAAE,EADwB;AAExCC,EAAAA,aAAa,EAAEC,SAFyB;AAGxCC,EAAAA,wBAAwB,EAAE,KAHc;AAIxCC,EAAAA,8BAA8B,EAAE,KAJQ;AAKxCC,EAAAA,QAAQ,EAAE,KAL8B;AAMxCC,EAAAA,YAAY,EAAE;AAN0B,CAA1C;AASA,OAAO,IAAMC,wBAAwB,GAAGX,gBAAgB,CACtD,yCADsD,EAEtD,iBAAOY,CAAP,EAAUC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEiBX,KAAK,CAACY,aAAN,CAAoBC,IAApB,EAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,2CAIWF,QAAQ,CAACG,eAAT,CAAyB;AAACC,YAAAA,KAAK,EAAE,YAAMC;AAAd,WAAzB,CAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFsD,CAAjD;AAWP,OAAO,IAAMC,kBAAkB,GAAGlB,WAAW,CAAC;AAC5CmB,EAAAA,IAAI,EAAE,eADsC;AAE5CjB,EAAAA,YAAY,EAAZA,YAF4C;AAG5CkB,EAAAA,QAAQ,EAAE,EAHkC;AAK5CC,EAAAA,aAAa,EAAG,uBAAAC,OAAO,EAAI;AAEzBA,IAAAA,OAAO,CAACC,OAAR,CAAgBb,wBAAwB,CAACc,OAAzC,EAAkD,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACnED,MAAAA,KAAK,CAACnB,wBAAN,GAAiC,IAAjC;AACD,KAFD;AAGAgB,IAAAA,OAAO,CAACC,OAAR,CAAgBb,wBAAwB,CAACiB,SAAzC,EAAoD,UAACF,KAAD,EAAQC,MAAR,EAAmB;AACrED,MAAAA,KAAK,CAACtB,cAAN,GAAuBuB,MAAM,CAACE,OAA9B;AACAH,MAAAA,KAAK,CAACnB,wBAAN,GAAiC,KAAjC;AACD,KAHD;AAIAgB,IAAAA,OAAO,CAACC,OAAR,CAAgBb,wBAAwB,CAACmB,QAAzC,EAAmD,UAACJ,KAAD,EAAQC,MAAR,EAAmB;AACpED,MAAAA,KAAK,CAAChB,YAAN,GAAqBiB,MAAM,CAACE,OAA5B;AACAH,MAAAA,KAAK,CAACnB,wBAAN,GAAiC,KAAjC;AACD,KAHD;AAKC;AAnByC,CAAD,CAAtC;;AAuBA,0BAAaY,kBAAkB,CAACY,OAAhC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\r\nimport agent from \"../api/agent\";\r\nimport { IModeOfPayment } from \"../models/ModeOfPayment\";\r\n\r\nexport interface IModeOfPaymentState {\r\n  modeOfPayments: IModeOfPayment[];\r\n  modeOfPayment?: IModeOfPayment;\r\n  isFetchingModeOfPayments: boolean;\r\n  isFetchingModeOfPaymentDetails: boolean;\r\n  isSaving: boolean;\r\n  errorMessage?: string;\r\n}\r\n\r\nconst initialState: IModeOfPaymentState = {\r\n  modeOfPayments: [],\r\n  modeOfPayment: undefined,\r\n  isFetchingModeOfPayments: false,\r\n  isFetchingModeOfPaymentDetails: false,\r\n  isSaving: false,\r\n  errorMessage: \"\"\r\n}\r\n\r\nexport const fetchModeOfPaymentsAsync = createAsyncThunk<IModeOfPayment[]>(\r\n  'modeOfPayments/fetchModeOfPaymentsAsync',\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      return await agent.ModeOfPayment.list();\r\n    } catch (error: any) {\r\n      return thunkAPI.rejectWithValue({error: error.data})\r\n    }\r\n  }\r\n)\r\n\r\nexport const modeOfPaymentSlice = createSlice({\r\n  name: 'modeOfPayment',\r\n  initialState,\r\n  reducers: {},\r\n\r\n  extraReducers: (builder => {\r\n\r\n    builder.addCase(fetchModeOfPaymentsAsync.pending, (state, action) => {\r\n      state.isFetchingModeOfPayments = true;\r\n    });\r\n    builder.addCase(fetchModeOfPaymentsAsync.fulfilled, (state, action) => {\r\n      state.modeOfPayments = action.payload;\r\n      state.isFetchingModeOfPayments = false;\r\n    });\r\n    builder.addCase(fetchModeOfPaymentsAsync.rejected, (state, action) => {\r\n      state.errorMessage = action.payload as any;\r\n      state.isFetchingModeOfPayments = false;\r\n    });\r\n\r\n    })\r\n})\r\n\r\n\r\nexport const {  } = modeOfPaymentSlice.actions;"]},"metadata":{},"sourceType":"module"}