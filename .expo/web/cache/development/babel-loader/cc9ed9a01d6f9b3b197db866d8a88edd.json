{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport agent from \"../api/agent\";\nvar initialState = {\n  invoices: [],\n  isFetchingInvoices: false,\n  invoice: undefined,\n  isFetchingInvoiceDetails: false,\n  isSaving: false,\n  isError: false\n};\nexport var fetchInvoicesAsync = createAsyncThunk('invoice/fetchInvoicessAsync', function _callee(id, thunkAPI) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(agent.Invoice.list(id));\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", thunkAPI.rejectWithValue({\n            error: _context.t0.data\n          }));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n});\nexport var fetchInvoiceDetailsAsync = createAsyncThunk('invoice/fetchInvoiceDetailsAsync', function _callee2(id, thunkAPI) {\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(agent.Invoice.details(id));\n\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", thunkAPI.rejectWithValue({\n            error: _context2.t0.data\n          }));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n});\nexport var invoiceSlice = createSlice({\n  name: 'invoice',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchInvoicesAsync.pending, function (state, action) {\n      state.isError = false;\n      state.isFetchingInvoices = true;\n    });\n    builder.addCase(fetchInvoicesAsync.fulfilled, function (state, action) {\n      state.invoices = action.payload;\n      state.isError = false;\n      state.isFetchingInvoices = false;\n    });\n    builder.addCase(fetchInvoicesAsync.rejected, function (state, action) {\n      state.isError = true;\n      state.isFetchingInvoices = false;\n    });\n    builder.addCase(fetchInvoiceDetailsAsync.pending, function (state, action) {\n      state.isError = false;\n      state.isFetchingInvoiceDetails = true;\n    });\n    builder.addCase(fetchInvoiceDetailsAsync.fulfilled, function (state, action) {\n      state.invoice = action.payload;\n      state.isError = false;\n      state.isFetchingInvoiceDetails = false;\n    });\n    builder.addCase(fetchInvoiceDetailsAsync.rejected, function (state, action) {\n      state.isError = true;\n      state.isFetchingInvoiceDetails = false;\n    });\n  }\n});\n\n_objectDestructuringEmpty(invoiceSlice.actions);\n\nexport {};","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/reducers/invoiceSlice.ts"],"names":["createAsyncThunk","createSlice","agent","initialState","invoices","isFetchingInvoices","invoice","undefined","isFetchingInvoiceDetails","isSaving","isError","fetchInvoicesAsync","id","thunkAPI","Invoice","list","rejectWithValue","error","data","fetchInvoiceDetailsAsync","details","invoiceSlice","name","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","rejected","actions"],"mappings":";;AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,OAAOC,KAAP;AAYA,IAAMC,YAA2B,GAAG;AAClCC,EAAAA,QAAQ,EAAE,EADwB;AAElCC,EAAAA,kBAAkB,EAAE,KAFc;AAGlCC,EAAAA,OAAO,EAAEC,SAHyB;AAIlCC,EAAAA,wBAAwB,EAAE,KAJQ;AAKlCC,EAAAA,QAAQ,EAAE,KALwB;AAMlCC,EAAAA,OAAO,EAAE;AANyB,CAApC;AASA,OAAO,IAAMC,kBAAkB,GAAGX,gBAAgB,CAChD,6BADgD,EAEhD,iBAAOY,EAAP,EAAWC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEiBX,KAAK,CAACY,OAAN,CAAcC,IAAd,CAAmBH,EAAnB,CAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,2CAIWC,QAAQ,CAACG,eAAT,CAAyB;AAACC,YAAAA,KAAK,EAAE,YAAMC;AAAd,WAAzB,CAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFgD,CAA3C;AAWP,OAAO,IAAMC,wBAAwB,GAAGnB,gBAAgB,CACtD,kCADsD,EAEtD,kBAAOY,EAAP,EAAWC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEiBX,KAAK,CAACY,OAAN,CAAcM,OAAd,CAAsBR,EAAtB,CAFjB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA,4CAIWC,QAAQ,CAACG,eAAT,CAAyB;AAACC,YAAAA,KAAK,EAAE,aAAMC;AAAd,WAAzB,CAJX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFsD,CAAjD;AAWP,OAAO,IAAMG,YAAY,GAAGpB,WAAW,CAAC;AACtCqB,EAAAA,IAAI,EAAE,SADgC;AAEtCnB,EAAAA,YAAY,EAAZA,YAFsC;AAGtCoB,EAAAA,QAAQ,EAAE,EAH4B;AAKtCC,EAAAA,aAAa,EAAG,uBAAAC,OAAO,EAAI;AAEzBA,IAAAA,OAAO,CAACC,OAAR,CAAgBf,kBAAkB,CAACgB,OAAnC,EAA4C,UAACC,KAAD,EAAQC,MAAR,EAAmB;AAC3DD,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAACvB,kBAAN,GAA2B,IAA3B;AACH,KAHD;AAIAoB,IAAAA,OAAO,CAACC,OAAR,CAAgBf,kBAAkB,CAACmB,SAAnC,EAA8C,UAACF,KAAD,EAAQC,MAAR,EAAmB;AAC7DD,MAAAA,KAAK,CAACxB,QAAN,GAAiByB,MAAM,CAACE,OAAxB;AACAH,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAACvB,kBAAN,GAA2B,KAA3B;AACH,KAJD;AAKAoB,IAAAA,OAAO,CAACC,OAAR,CAAgBf,kBAAkB,CAACqB,QAAnC,EAA6C,UAACJ,KAAD,EAAQC,MAAR,EAAmB;AAC5DD,MAAAA,KAAK,CAAClB,OAAN,GAAgB,IAAhB;AACAkB,MAAAA,KAAK,CAACvB,kBAAN,GAA2B,KAA3B;AACH,KAHD;AAMAoB,IAAAA,OAAO,CAACC,OAAR,CAAgBP,wBAAwB,CAACQ,OAAzC,EAAkD,UAACC,KAAD,EAAQC,MAAR,EAAmB;AACjED,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAACpB,wBAAN,GAAiC,IAAjC;AACH,KAHD;AAIAiB,IAAAA,OAAO,CAACC,OAAR,CAAgBP,wBAAwB,CAACW,SAAzC,EAAoD,UAACF,KAAD,EAAQC,MAAR,EAAmB;AACnED,MAAAA,KAAK,CAACtB,OAAN,GAAgBuB,MAAM,CAACE,OAAvB;AACAH,MAAAA,KAAK,CAAClB,OAAN,GAAgB,KAAhB;AACAkB,MAAAA,KAAK,CAACpB,wBAAN,GAAiC,KAAjC;AACH,KAJD;AAKAiB,IAAAA,OAAO,CAACC,OAAR,CAAgBP,wBAAwB,CAACa,QAAzC,EAAmD,UAACJ,KAAD,EAAQC,MAAR,EAAmB;AAClED,MAAAA,KAAK,CAAClB,OAAN,GAAgB,IAAhB;AACAkB,MAAAA,KAAK,CAACpB,wBAAN,GAAiC,KAAjC;AACH,KAHD;AAID;AAnCqC,CAAD,CAAhC;;AAsCA,0BAAaa,YAAY,CAACY,OAA1B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\nimport agent from \"../api/agent\";\nimport { IInvoice } from \"../models/Invoice\";\n\nexport interface IInvoiceState {\n  invoices: IInvoice[];\n  invoice?: IInvoice;\n  isFetchingInvoices: boolean;\n  isFetchingInvoiceDetails: boolean;\n  isSaving: boolean;\n  isError: boolean;\n}\n\nconst initialState: IInvoiceState = {\n  invoices: [],\n  isFetchingInvoices: false,\n  invoice: undefined,\n  isFetchingInvoiceDetails: false,\n  isSaving: false,\n  isError: false\n}\n\nexport const fetchInvoicesAsync = createAsyncThunk<IInvoice[], string>(\n  'invoice/fetchInvoicessAsync',\n  async (id, thunkAPI) => {\n    try {\n      return await agent.Invoice.list(id);\n    } catch (error: any) {\n      return thunkAPI.rejectWithValue({error: error.data})\n    }\n  }\n)\n\nexport const fetchInvoiceDetailsAsync = createAsyncThunk<IInvoice, string>(\n  'invoice/fetchInvoiceDetailsAsync',\n  async (id, thunkAPI) => {\n    try {\n      return await agent.Invoice.details(id);\n    } catch (error: any) {\n      return thunkAPI.rejectWithValue({error: error.data})\n    }\n  }\n)\n\nexport const invoiceSlice = createSlice({\n  name: 'invoice',\n  initialState,\n  reducers: {},\n\n  extraReducers: (builder => {\n\n    builder.addCase(fetchInvoicesAsync.pending, (state, action) => {\n        state.isError = false;\n        state.isFetchingInvoices = true;\n    });\n    builder.addCase(fetchInvoicesAsync.fulfilled, (state, action) => {\n        state.invoices = action.payload;\n        state.isError = false;\n        state.isFetchingInvoices = false;\n    });\n    builder.addCase(fetchInvoicesAsync.rejected, (state, action) => {\n        state.isError = true;\n        state.isFetchingInvoices = false;\n    });\n\n    \n    builder.addCase(fetchInvoiceDetailsAsync.pending, (state, action) => {\n        state.isError = false;\n        state.isFetchingInvoiceDetails = true;\n    });\n    builder.addCase(fetchInvoiceDetailsAsync.fulfilled, (state, action) => {\n        state.invoice = action.payload;\n        state.isError = false;\n        state.isFetchingInvoiceDetails = false;\n    });\n    builder.addCase(fetchInvoiceDetailsAsync.rejected, (state, action) => {\n        state.isError = true;\n        state.isFetchingInvoiceDetails = false;\n    });\n  })\n})\n\nexport const {  } = invoiceSlice.actions;"]},"metadata":{},"sourceType":"module"}