{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useDispatch } from 'react-redux';\nimport { useAppSelecter } from \"../../store/configureStore\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as Yup from 'yup';\nimport { styles } from \"../../styles/styles\";\nimport colors from \"../../styles/colors\";\nimport AppButton from \"../../components/button/AppButton\";\nimport AppText from \"../../components/text/AppText\";\nimport FormTextInput from \"../../components/input/FormTextInput\";\nimport { Formik } from 'formik';\nimport { fetchTenantDetailsAsync } from \"../../reducers/tenantSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginFormScreen = function LoginFormScreen(_ref) {\n  var navigation = _ref.navigation;\n  var accountNumber = useState('');\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (!!tenant) navigation.navigate(\"HomeNavigator\");\n  }, [tenant]);\n  var validationSchema = Yup.object({\n    accountNumber: Yup.string().required(\"Account Number is required.\")\n  });\n\n  var _onSubmit = function onSubmit(accountNumber) {\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(fetchTenantDetailsAsync(accountNumber)));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var bg_darken = styles.bg_darken,\n      centered = styles.centered,\n      flex_1 = styles.flex_1,\n      p_15 = styles.p_15,\n      row_center = styles.row_center,\n      w_100p = styles.w_100p;\n  return _jsx(ImageBackground, {\n    resizeMode: \"cover\",\n    source: require(\"../../../assets/images/login-bg.jpg\"),\n    style: {\n      height: '100%',\n      width: '100%'\n    },\n    children: _jsxs(View, {\n      style: [flex_1, bg_darken],\n      children: [_jsx(View, {\n        style: [flex_1, row_center],\n        children: _jsx(AppText, {\n          as: \"title\",\n          color: colors.light,\n          children: \"Maximarket\"\n        })\n      }), _jsxs(View, {\n        style: [centered, flex_1, p_15, w_100p],\n        children: [_jsx(Formik, {\n          validationSchema: validationSchema,\n          enableReinitialize: true,\n          initialValues: accountNumber,\n          onSubmit: function onSubmit(values) {\n            return _onSubmit(values);\n          }\n        }), _jsx(FormTextInput, {\n          icon: _jsx(MaterialCommunityIcons, {\n            name: \"clipboard-account\",\n            size: 18,\n            color: colors.primary\n          }),\n          placeholder: \"Enter Account Number\"\n        }), _jsx(AppButton, {\n          onPress: function onPress() {\n            return console.log(\"Pressed\");\n          },\n          title: \"Submit\"\n        })]\n      })]\n    })\n  });\n};\n\nexport default LoginFormScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/account/LoginFormScreen.tsx"],"names":["React","useEffect","useState","useDispatch","useAppSelecter","MaterialCommunityIcons","Yup","styles","colors","AppButton","AppText","FormTextInput","Formik","fetchTenantDetailsAsync","LoginFormScreen","navigation","accountNumber","state","tenant","dispatch","navigate","validationSchema","object","string","required","onSubmit","bg_darken","centered","flex_1","p_15","row_center","w_100p","require","height","width","light","values","primary","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ImageBackground, View } from 'react-native';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelecter } from '../../store/configureStore';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as Yup from 'yup';\n\nimport { styles } from '../../styles/styles';\nimport colors from '../../styles/colors';\nimport AppButton from '../../components/button/AppButton';\nimport AppText from '../../components/text/AppText';\nimport FormTextInput from '../../components/input/FormTextInput';\nimport routes from '../../navigations/routes';\nimport { Formik } from 'formik';\nimport { fetchTenantDetailsAsync } from '../../reducers/tenantSlice';\n\ninterface Props {\n    navigation: any\n}\n\nconst LoginFormScreen: React.FC<Props> = ({ navigation }) => {\n\n    const accountNumber = useState('');\n\n    const { tenant } = useAppSelecter((state) => state.tenant)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (!!tenant) navigation.navigate(\"HomeNavigator\")\n    }, [tenant])\n\n    const validationSchema = Yup.object({\n        accountNumber: Yup.string().required(\"Account Number is required.\")\n    })\n\n    const onSubmit = async (accountNumber: string) => {\n        await dispatch(fetchTenantDetailsAsync(accountNumber));\n    }\n\n    const { bg_darken, centered, flex_1, p_15, row_center, w_100p } = styles\n\n    return (\n        <ImageBackground resizeMode=\"cover\" source={require('../../../assets/images/login-bg.jpg')} style={{ height: '100%', width: '100%' }}>\n            <View style={[flex_1, bg_darken]}>\n\n                <View style={[flex_1, row_center]}>\n                    <AppText as=\"title\" color={colors.light}>Maximarket</AppText>\n                </View>\n\n                <View style={[centered, flex_1, p_15, w_100p]}>\n                    <Formik\n                        validationSchema={validationSchema}\n                        enableReinitialize\n                        initialValues={accountNumber}\n                        onSubmit={values => onSubmit(values)}>\n\n                    </Formik>\n\n                    <FormTextInput\n                        icon={<MaterialCommunityIcons name=\"clipboard-account\" size={18} color={colors.primary} />}\n                        placeholder='Enter Account Number'\n                    />\n                    <AppButton onPress={() => console.log(\"Pressed\")} title='Submit' />\n                </View>\n            </View>\n        </ImageBackground >\n\n    );\n}\n\nexport default LoginFormScreen;"]},"metadata":{},"sourceType":"module"}