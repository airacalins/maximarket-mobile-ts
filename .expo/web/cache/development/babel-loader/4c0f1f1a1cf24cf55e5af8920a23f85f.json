{"ast":null,"code":"import React, { useEffect } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useDispatch } from 'react-redux';\nimport { useAppSelecter } from \"../../store/configureStore\";\nimport { fetchModeOfPaymentsAsync } from \"../../reducers/modeOfPaymentSlice\";\nimport { styles } from \"../../styles/styles\";\nimport ModeOfPaymentItem from \"../../components/item/ModeOfPaymentItem\";\nimport NoData from \"../../components/indicator/NoData\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ModeOfPaymentsScreen = function ModeOfPaymentsScreen() {\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.modeOfPayment;\n  }),\n      modeOfPayments = _useAppSelecter.modeOfPayments,\n      isFetchingModeOfPayments = _useAppSelecter.isFetchingModeOfPayments;\n\n  var container = styles.container;\n  var dispatch = useDispatch();\n  useEffect(function () {\n    dispatch(fetchModeOfPaymentsAsync());\n  }, []);\n  if (isFetchingModeOfPayments) return _jsx(LoadingScreen, {});\n  if (!modeOfPayments) return _jsx(NoData, {});\n  return _jsx(View, {\n    style: container,\n    children: _jsx(FlatList, {\n      data: modeOfPayments,\n      keyExtractor: function keyExtractor(m) {\n        return m.id;\n      },\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(ModeOfPaymentItem, {\n          bankName: item.bankName,\n          accountName: item.accountName,\n          accountNumber: item.accountNumber\n        });\n      }\n    })\n  });\n};\n\nexport default ModeOfPaymentsScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/modeOfPayment/ModeOfPayments.tsx"],"names":["React","useEffect","useDispatch","useAppSelecter","fetchModeOfPaymentsAsync","styles","ModeOfPaymentItem","NoData","LoadingScreen","ModeOfPaymentsScreen","state","modeOfPayment","modeOfPayments","isFetchingModeOfPayments","container","dispatch","m","id","item","bankName","accountName","accountNumber"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,cAAT;AAEA,SAASC,wBAAT;AACA,SAASC,MAAT;AACA,OAAOC,iBAAP;AACA,OAAOC,MAAP;AACA,OAAOC,aAAP;;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAC/B,wBAAqDN,cAAc,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACC,aAAV;AAAA,GAAN,CAAnE;AAAA,MAAQC,cAAR,mBAAQA,cAAR;AAAA,MAAwBC,wBAAxB,mBAAwBA,wBAAxB;;AAEA,MAAQC,SAAR,GAAsBT,MAAtB,CAAQS,SAAR;AAEA,MAAMC,QAAQ,GAAGb,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACZc,IAAAA,QAAQ,CAACX,wBAAwB,EAAzB,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAIS,wBAAJ,EAA8B,OAAO,KAAC,aAAD,KAAP;AAC9B,MAAI,CAACD,cAAL,EAAqB,OAAO,KAAC,MAAD,KAAP;AAErB,SACI,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEE,SAAb;AAAA,cAEI,KAAC,QAAD;AACI,MAAA,IAAI,EAAEF,cADV;AAEI,MAAA,YAAY,EAAE,sBAACI,CAAD;AAAA,eAAOA,CAAC,CAACC,EAAT;AAAA,OAFlB;AAGI,MAAA,UAAU,EAAE;AAAA,YAAGC,IAAH,QAAGA,IAAH;AAAA,eACR,KAAC,iBAAD;AAAmB,UAAA,QAAQ,EAAEA,IAAI,CAACC,QAAlC;AAA4C,UAAA,WAAW,EAAED,IAAI,CAACE,WAA9D;AAA2E,UAAA,aAAa,EAAEF,IAAI,CAACG;AAA/F,UADQ;AAAA;AAHhB;AAFJ,IADJ;AAcH,CA5BD;;AA8BA,eAAeZ,oBAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { FlatList, View } from 'react-native';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelecter } from '../../store/configureStore';\n\nimport { fetchModeOfPaymentsAsync } from '../../reducers/modeOfPaymentSlice';\nimport { styles } from '../../styles/styles';\nimport ModeOfPaymentItem from '../../components/item/ModeOfPaymentItem';\nimport NoData from '../../components/indicator/NoData';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\n\nconst ModeOfPaymentsScreen = () => {\n    const { modeOfPayments, isFetchingModeOfPayments } = useAppSelecter(state => state.modeOfPayment);\n\n    const { container } = styles\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(fetchModeOfPaymentsAsync());\n    }, [])\n\n    if (isFetchingModeOfPayments) return <LoadingScreen />\n    if (!modeOfPayments) return <NoData />\n\n    return (\n        <View style={container}>\n\n            <FlatList\n                data={modeOfPayments}\n                keyExtractor={(m) => m.id}\n                renderItem={({ item }) =>\n                    <ModeOfPaymentItem bankName={item.bankName} accountName={item.accountName} accountNumber={item.accountNumber} />\n                }\n            />\n\n        </View>\n\n    );\n}\n\nexport default ModeOfPaymentsScreen;"]},"metadata":{},"sourceType":"module"}