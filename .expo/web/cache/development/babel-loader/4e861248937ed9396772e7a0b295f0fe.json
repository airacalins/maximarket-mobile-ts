{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport AppText from \"../../components/text/AppText\";\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport { fetchInvoiceDetailsAsync, fetchInvoicesAsync } from \"../../reducers/invoiceSlice\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport NoData from \"../../components/indicator/NoData\";\nimport { dateFormatter } from \"../../utils/dateFormatter\";\nimport routes from \"../../navigations/routes\";\nimport InvoiceBadge from \"../../components/badge/InvoiceBadge\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar InvoicesScreen = function InvoicesScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useAppDispatch();\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var _useAppSelecter2 = useAppSelecter(function (state) {\n    return state.invoice;\n  }),\n      invoices = _useAppSelecter2.invoices,\n      isFetchingInvoices = _useAppSelecter2.isFetchingInvoices;\n\n  useEffect(function () {\n    if (!tenant) navigation.navigate(\"AuthNavigator\");\n  }, [tenant]);\n  useEffect(function () {\n    dispatch(fetchInvoicesAsync(tenant == null ? void 0 : tenant.tenantUniqueId));\n  }, []);\n  var bg_light = styles.bg_light,\n      container = styles.container,\n      me_5 = styles.me_5,\n      my_5 = styles.my_5,\n      p_15 = styles.p_15,\n      row_center_x = styles.row_center_x,\n      row_center_x_between = styles.row_center_x_between,\n      rounded = styles.rounded;\n  var darkGrey = colors.darkGrey,\n      secondary = colors.secondary;\n\n  var handleInvoiceDetails = function handleInvoiceDetails(id) {\n    return _regeneratorRuntime.async(function handleInvoiceDetails$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            navigation.navigate(routes.INVOICE_DETAILS);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(dispatch(fetchInvoiceDetailsAsync(id)));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (isFetchingInvoices) return _jsx(LoadingScreen, {});\n  if (!invoices) return _jsx(NoData, {});\n  return _jsx(View, {\n    style: container,\n    children: _jsx(FlatList, {\n      data: invoices,\n      keyExtractor: function keyExtractor(i) {\n        return i.id;\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleInvoiceDetails(item.invoiceStatus);\n          },\n          children: _jsxs(View, {\n            style: [bg_light, my_5, p_15, rounded],\n            children: [_jsxs(View, {\n              style: row_center_x,\n              children: [_jsx(View, {\n                style: me_5,\n                children: _jsx(AppText, {\n                  as: \"h5\",\n                  bold: true,\n                  color: darkGrey,\n                  children: dateFormatter(item.dateCreated)\n                })\n              }), _jsx(InvoiceBadge, {\n                status: item.invoiceStatus\n              })]\n            }), _jsxs(View, {\n              style: row_center_x_between,\n              children: [_jsx(View, {\n                children: _jsx(AppText, {\n                  bold: true,\n                  children: item.invoiceNumber\n                })\n              }), _jsx(AppText, {\n                as: \"h3\",\n                bold: true,\n                color: secondary,\n                children: item.amount\n              })]\n            })]\n          })\n        });\n      }\n    })\n  });\n};\n\nexport default InvoicesScreen;\n{}","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/invoice/InvoicesScreen.tsx"],"names":["React","useEffect","colors","styles","AppText","useAppDispatch","useAppSelecter","fetchInvoiceDetailsAsync","fetchInvoicesAsync","LoadingScreen","NoData","dateFormatter","routes","InvoiceBadge","InvoicesScreen","navigation","dispatch","state","tenant","invoice","invoices","isFetchingInvoices","navigate","tenantUniqueId","bg_light","container","me_5","my_5","p_15","row_center_x","row_center_x_between","rounded","darkGrey","secondary","handleInvoiceDetails","id","INVOICE_DETAILS","i","item","invoiceStatus","dateCreated","invoiceNumber","amount"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { FlatList, TouchableOpacity, View } from 'react-native';\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport AppText from '../../components/text/AppText';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport { fetchInvoiceDetailsAsync, fetchInvoicesAsync } from '../../reducers/invoiceSlice';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport NoData from '../../components/indicator/NoData';\nimport { dateFormatter } from '../../utils/dateFormatter';\nimport routes from '../../navigations/routes';\nimport InvoiceBadge from '../../components/badge/InvoiceBadge';\n\ninterface Props {\n    navigation: any\n}\n\nconst InvoicesScreen: React.FC<Props> = ({ navigation }) => {\n    const dispatch = useAppDispatch()\n    const { tenant } = useAppSelecter((state) => state.tenant)\n    const { invoices, isFetchingInvoices } = useAppSelecter((state) => state.invoice)\n\n    useEffect(() => {\n        if (!tenant) navigation.navigate(\"AuthNavigator\")\n    }, [tenant])\n\n    useEffect(() => {\n        dispatch(fetchInvoicesAsync(tenant?.tenantUniqueId!))\n    }, [])\n\n    const { bg_light, container, me_5, my_5, p_15, row_center_x, row_center_x_between, rounded } = styles;\n    const { darkGrey, secondary } = colors;\n\n    const handleInvoiceDetails = async (id: string) => {\n        navigation.navigate(routes.INVOICE_DETAILS)\n        await dispatch(fetchInvoiceDetailsAsync(id))\n    }\n\n    if (isFetchingInvoices) return <LoadingScreen />\n    if (!invoices) return <NoData />\n\n    return (\n        <View style={container}>\n            <FlatList\n                data={invoices}\n                keyExtractor={(i) => i.id}\n                renderItem={({ item }) =>\n                    <TouchableOpacity onPress={() => handleInvoiceDetails(item.invoiceStatus)}>\n\n                        <View style={[bg_light, my_5, p_15, rounded]}>\n                            <View style={row_center_x}>\n                                <View style={me_5}>\n                                    <AppText as=\"h5\" bold color={darkGrey}>{dateFormatter(item.dateCreated)}</AppText>\n                                </View>\n\n                                <InvoiceBadge status={item.invoiceStatus} />\n                            </View>\n\n                            <View style={row_center_x_between}>\n                                <View>\n                                    <AppText bold>{item.invoiceNumber}</AppText>\n                                </View>\n\n                                <AppText as=\"h3\" bold color={secondary}>{item.amount}</AppText>\n                            </View>\n                        </View>\n                    </TouchableOpacity>\n                }\n            />\n        </View>\n    );\n}\n\nexport default InvoicesScreen;\n\n{/* <FlatList\ndata={invoices}\nkeyExtractor={(i) => i.id}\nrenderItem={({ item }) =>\n    <TouchableOpacity onPress={() => { }}>\n        <View style={[bg_light, my_5, p_15, row_center_x_between, rounded]}>\n            <View>\n                <AppText bold>{item.invoiceNumber}</AppText>\n                <AppText as=\"h5\" bold color={darkGrey}>{item.dateCreated}</AppText>\n            </View>\n            <AppText as=\"h3\" bold color={secondary}>{item.amount}</AppText>\n        </View>\n    </TouchableOpacity>\n}\n/> */}"]},"metadata":{},"sourceType":"module"}