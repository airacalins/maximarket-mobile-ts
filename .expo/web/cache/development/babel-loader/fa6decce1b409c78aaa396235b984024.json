{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { FontAwesome } from '@expo/vector-icons';\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport FormTextInput from \"../../components/input/FormTextInput\";\nimport * as Yup from 'yup';\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport { Formik } from 'formik';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar AccountFormScreen = function AccountFormScreen() {\n  var dispatch = useAppDispatch();\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var _useState = useState({\n    firstName: \"\",\n    lastName: \"\",\n    businessName: \"\",\n    phone: \"\",\n    address: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      tenantInput = _useState2[0],\n      setTenantInput = _useState2[1];\n\n  useEffect(function () {\n    if (!!tenant) setTenantInput({\n      firstName: tenant.firstName,\n      lastName: tenant.lastName,\n      businessName: tenant.businessName,\n      phone: tenant.phone,\n      address: tenant.address\n    });\n  }, [tenant]);\n  var validationSchema = Yup.object().shape({\n    firstName: Yup.string().required().label('First name'),\n    lastName: Yup.string().required().label('Last name'),\n    businessName: Yup.string().required().label('Business name'),\n    phone: Yup.string().required().label('Phone'),\n    address: Yup.string().required().label('Address')\n  });\n  var container = styles.container;\n  return _jsx(View, {\n    style: [container],\n    children: _jsx(Formik, {\n      initialValues: tenant,\n      onSubmit: function (_onSubmit) {\n        function onSubmit(_x) {\n          return _onSubmit.apply(this, arguments);\n        }\n\n        onSubmit.toString = function () {\n          return _onSubmit.toString();\n        };\n\n        return onSubmit;\n      }(function (values) {\n        return onSubmit(values);\n      }),\n      validationSchema: validationSchema,\n      children: function children(_ref) {\n        var handleChange = _ref.handleChange,\n            handleSubmit = _ref.handleSubmit,\n            setFieldTouched = _ref.setFieldTouched,\n            errors = _ref.errors,\n            touched = _ref.touched;\n        return _jsx(FormTextInput, {\n          icon: _jsx(FontAwesome, {\n            name: \"user\",\n            size: 18,\n            color: colors.primary\n          }),\n          onBlur: function onBlur() {\n            return setFieldTouched('firstName');\n          },\n          onChangeText: handleChange('firstName'),\n          label: \"First Name\",\n          placeholder: \"First Name\",\n          errorMessage: touched && errors.firstName\n        });\n      }\n    })\n  });\n};\n\nexport default AccountFormScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/account/AccountFormScreen.tsx"],"names":["React","useEffect","useState","FontAwesome","colors","styles","FormTextInput","Yup","useAppDispatch","useAppSelecter","Formik","AccountFormScreen","dispatch","state","tenant","firstName","lastName","businessName","phone","address","tenantInput","setTenantInput","validationSchema","object","shape","string","required","label","container","values","onSubmit","handleChange","handleSubmit","setFieldTouched","errors","touched","primary"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View } from 'react-native';\nimport { AntDesign } from '@expo/vector-icons';\nimport { FontAwesome } from '@expo/vector-icons';\n\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport AppButton from '../../components/button/AppButton';\nimport FormTextInput from '../../components/input/FormTextInput';\nimport * as Yup from 'yup';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport { Formik } from 'formik';\n\nconst AccountFormScreen = () => {\n    const dispatch = useAppDispatch();\n    const { tenant } = useAppSelecter((state) => state.tenant)\n\n    const [tenantInput, setTenantInput] = useState({\n        firstName: \"\",\n        lastName: \"\",\n        businessName: \"\",\n        phone: \"\",\n        address: \"\"\n    });\n\n    useEffect(() => {\n        if (!!tenant) setTenantInput({\n            firstName: tenant.firstName,\n            lastName: tenant.lastName,\n            businessName: tenant.businessName,\n            phone: tenant.phone,\n            address: tenant.address\n        })\n    }, [tenant])\n\n    const validationSchema = Yup.object().shape({\n        firstName: Yup.string().required().label('First name'),\n        lastName: Yup.string().required().label('Last name'),\n        businessName: Yup.string().required().label('Business name'),\n        phone: Yup.string().required().label('Phone'),\n        address: Yup.string().required().label('Address'),\n    });\n\n    const { container } = styles\n\n    return (\n        <View style={[container]}>\n\n            <Formik\n                initialValues={tenant}\n                onSubmit={values => onSubmit(values)}\n                validationSchema={validationSchema}\n            >\n                {\n                    ({ handleChange, handleSubmit, setFieldTouched, errors, touched }) => (\n                        <FormTextInput\n                            icon={<FontAwesome name=\"user\" size={18} color={colors.primary} />}\n                            onBlur={() => setFieldTouched('firstName')}\n                            onChangeText={handleChange('firstName')}\n                            label='First Name'\n                            placeholder='First Name'\n                            errorMessage={touched && errors.firstName}\n                        />\n                    )\n\n                }\n\n            </Formik>\n\n            {/* <Detail title=\"Status\" value={\n                isActive ?\n                    <View style={[badge, bg_green]} >\n                        <AppText as=\"h5\" bold color={light} italic>Active</AppText>\n                    </View> :\n\n                    <View style={[badge, bg_red]} >\n                        <AppText as=\"h5\" bold color={light} italic>Deativated</AppText>\n                    </View>\n            } /> */}\n            {/* <FormTextInput icon={<FontAwesome name=\"user\" size={18} color={colors.primary} />} label='First Name' placeholder='First Name' />\n            <FormTextInput icon={<FontAwesome name=\"user\" size={18} color={colors.primary} />} label='Last Name' placeholder='Last Name' />\n            <FormTextInput icon={<AntDesign name=\"idcard\" size={18} color={colors.primary} />} label='Business Name' placeholder='Business Name' />\n            <FormTextInput icon={<FontAwesome name=\"phone\" size={18} color={colors.primary} />} label='Contact Number' placeholder='Contact Number' />\n            <FormTextInput icon={<FontAwesome name=\"home\" size={18} color={colors.primary} />} label='Address' placeholder='Address' />\n            <AppButton title='UPDATE' onPress={() => { { } }} /> */}\n        </View>\n    );\n}\n\nexport default AccountFormScreen;"]},"metadata":{},"sourceType":"module"}