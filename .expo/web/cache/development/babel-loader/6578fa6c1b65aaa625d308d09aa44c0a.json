{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport FormTextInput from \"../../components/input/FormTextInput\";\nimport AppText from \"../../components/text/AppText\";\nimport { useAppSelecter } from \"../../store/configureStore\";\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport * as Yup from 'yup';\nimport RNPickerSelect from 'react-native-picker-select';\nimport AppButton from \"../../components/button/AppButton\";\nimport { fetchInvoiceDetailsAsync } from \"../../reducers/invoiceSlice\";\nimport { Formik } from 'formik';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar PaymentFormScreen = function PaymentFormScreen() {\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var _useAppSelecter2 = useAppSelecter(function (state) {\n    return state.invoice;\n  }),\n      invoice = _useAppSelecter2.invoice,\n      isFetchingInvoiceDetails = _useAppSelecter2.isFetchingInvoiceDetails;\n\n  var _useAppSelecter3 = useAppSelecter(function (state) {\n    return state.modeOfPayment;\n  }),\n      modeOfPayments = _useAppSelecter3.modeOfPayments,\n      isFetchingModeOfPayments = _useAppSelecter3.isFetchingModeOfPayments;\n\n  var _useState = useState({\n    modeOfPaymentId: \"\",\n    amount: 0,\n    file: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      payment = _useState2[0],\n      setPayment = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      amount = _useState4[0],\n      setAmount = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      modeOfPaymentId = _useState6[0],\n      setModeOfPaymentId = _useState6[1];\n\n  var _useState7 = useState(null),\n      _useState8 = _slicedToArray(_useState7, 2),\n      image = _useState8[0],\n      setImage = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      imageData = _useState10[0],\n      setImageData = _useState10[1];\n\n  var validationSchema = Yup.object().shape({\n    modeOfPayment: Yup.string().required().label('Mode of Payment'),\n    amount: Yup.number().required().label('Amount'),\n    file: Yup.string().required().label('Proof of Payment')\n  });\n  var bg_light = styles.bg_light,\n      container = styles.container,\n      my_5 = styles.my_5,\n      p_30 = styles.p_30,\n      row_center = styles.row_center;\n  var darkGrey = colors.darkGrey,\n      primary = colors.primary;\n  useEffect(function () {\n    if (!invoice) fetchInvoiceDetailsAsync(tenant == null ? void 0 : tenant.tenantUniqueId);\n  }, [invoice]);\n\n  var _onSubmit = function onSubmit(values) {\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(values);\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (isFetchingInvoiceDetails || !invoice) return _jsx(LoadingScreen, {});\n  var invoiceNumber = invoice.invoiceNumber;\n  return _jsxs(View, {\n    style: container,\n    children: [_jsxs(View, {\n      style: [my_5],\n      children: [_jsx(AppText, {\n        as: \"h5\",\n        bold: true,\n        color: darkGrey,\n        children: \"Invoice Number\"\n      }), _jsx(AppText, {\n        bold: true,\n        children: invoiceNumber\n      })]\n    }), _jsx(Formik, {\n      initialValues: payment,\n      onSubmit: function onSubmit(values) {\n        return _onSubmit(values);\n      },\n      validationSchema: validationSchema,\n      children: function children(_ref) {\n        var handleChange = _ref.handleChange,\n            handleSubmit = _ref.handleSubmit,\n            setFieldTouched = _ref.setFieldTouched,\n            errors = _ref.errors,\n            touched = _ref.touched,\n            values = _ref.values;\n        return _jsxs(_Fragment, {\n          children: [_jsx(RNPickerSelect, {\n            onValueChange: function onValueChange(value) {\n              return console.log(value);\n            },\n            items: [{\n              label: 'Football',\n              value: 'football'\n            }, {\n              label: 'Baseball',\n              value: 'baseball'\n            }, {\n              label: 'Hockey',\n              value: 'hockey'\n            }]\n          }), _jsx(FormTextInput, {\n            icon: _jsx(MaterialIcons, {\n              name: \"money\",\n              size: 20,\n              color: primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('amount');\n            },\n            onChangeText: handleChange('amount'),\n            label: \"Amount\",\n            placeholder: \"Amount\",\n            errorMessage: touched && errors.amount\n          })]\n        });\n      }\n    }), _jsx(AppButton, {\n      onPress: function onPress() {},\n      title: \"Submit\"\n    })]\n  });\n};\n\nexport default PaymentFormScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/payment/PaymentFormScreen.tsx"],"names":["React","useEffect","useState","LoadingScreen","FormTextInput","AppText","useAppSelecter","colors","styles","MaterialIcons","Yup","RNPickerSelect","AppButton","fetchInvoiceDetailsAsync","Formik","PaymentFormScreen","state","tenant","invoice","isFetchingInvoiceDetails","modeOfPayment","modeOfPayments","isFetchingModeOfPayments","modeOfPaymentId","amount","file","payment","setPayment","setAmount","setModeOfPaymentId","image","setImage","imageData","setImageData","validationSchema","object","shape","string","required","label","number","bg_light","container","my_5","p_30","row_center","darkGrey","primary","tenantUniqueId","onSubmit","values","console","log","invoiceNumber","handleChange","handleSubmit","setFieldTouched","errors","touched","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Text, View } from 'react-native';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport FormTextInput from '../../components/input/FormTextInput';\nimport AppText from '../../components/text/AppText';\nimport { useAppSelecter } from '../../store/configureStore';\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as Yup from 'yup';\nimport RNPickerSelect from 'react-native-picker-select';\n\n\n\nimport AppButton from '../../components/button/AppButton';\nimport { fetchInvoiceDetailsAsync } from '../../reducers/invoiceSlice';\nimport { Formik } from 'formik';\n\n\nconst PaymentFormScreen = () => {\n    const { tenant } = useAppSelecter((state) => state.tenant)\n    const { invoice, isFetchingInvoiceDetails } = useAppSelecter((state) => state.invoice)\n    const { modeOfPayments, isFetchingModeOfPayments } = useAppSelecter(state => state.modeOfPayment);\n\n    const [payment, setPayment] = useState({\n        modeOfPaymentId: \"\",\n        amount: 0,\n        file: \"\"\n    })\n\n    const [amount, setAmount] = useState(\"\")\n    const [modeOfPaymentId, setModeOfPaymentId] = useState(\"\")\n    const [image, setImage] = useState(null);\n    const [imageData, setImageData] = useState(null);\n\n    const validationSchema = Yup.object().shape({\n        modeOfPayment: Yup.string().required().label('Mode of Payment'),\n        amount: Yup.number().required().label('Amount'),\n        file: Yup.string().required().label('Proof of Payment'),\n    });\n\n    const { bg_light, container, my_5, p_30, row_center } = styles\n    const { darkGrey, primary } = colors\n\n    useEffect(() => {\n        if (!invoice) fetchInvoiceDetailsAsync(tenant?.tenantUniqueId!)\n    }, [invoice])\n\n    const onSubmit = async (values: any) => {\n        console.log(values)\n    }\n\n    if (isFetchingInvoiceDetails || !invoice) return <LoadingScreen />\n    const { invoiceNumber } = invoice\n\n\n    return (\n        <View style={container}>\n\n            <View style={[my_5]}>\n                <AppText as=\"h5\" bold color={darkGrey} >Invoice Number</AppText>\n                <AppText bold >{invoiceNumber}</AppText>\n            </View>\n\n            <Formik\n                initialValues={payment}\n                onSubmit={values => onSubmit(values)}\n                validationSchema={validationSchema}\n            >\n                {\n                    ({ handleChange, handleSubmit, setFieldTouched, errors, touched, values }) => (\n                        <>\n                            <RNPickerSelect\n                                onValueChange={(value) => console.log(value)}\n                                items={[\n                                    { label: 'Football', value: 'football' },\n                                    { label: 'Baseball', value: 'baseball' },\n                                    { label: 'Hockey', value: 'hockey' },\n                                ]}\n                            />\n\n                            <FormTextInput\n                                icon={<MaterialIcons name=\"money\" size={20} color={primary} />}\n                                onBlur={() => setFieldTouched('amount')}\n                                onChangeText={handleChange('amount')}\n                                label='Amount'\n                                placeholder='Amount'\n                                errorMessage={touched && errors.amount}\n                            />\n                        </>\n                    )\n                }\n            </Formik>\n\n\n\n            {/* <View style={my_5}>\n                <AppText as=\"h5\" bold color={darkGrey} >Proof of Payment</AppText>\n                <View style={[bg_light, p_30, row_center]}>\n                    <MaterialCommunityIcons name=\"camera-account\" size={50} color={darkGrey} />\n                </View>\n            </View> */}\n\n            <AppButton onPress={() => { }} title='Submit' />\n\n        </View>\n    );\n}\n\nexport default PaymentFormScreen;"]},"metadata":{},"sourceType":"module"}