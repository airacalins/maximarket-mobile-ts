{"ast":null,"code":"import React, { useEffect } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport AppText from \"../../components/text/AppText\";\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport { fetchInvoicesAsync } from \"../../reducers/invoiceSlice\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport NoData from \"../../components/indicator/NoData\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar InvoicesScreen = function InvoicesScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useAppDispatch();\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var _useAppSelecter2 = useAppSelecter(function (state) {\n    return state.invoice;\n  }),\n      invoices = _useAppSelecter2.invoices,\n      isFetchingInvoices = _useAppSelecter2.isFetchingInvoices,\n      isFetchingInvoiceDetails = _useAppSelecter2.isFetchingInvoiceDetails;\n\n  useEffect(function () {\n    if (!tenant) navigation.navigate(\"AuthNavigator\");\n  }, [tenant]);\n  useEffect(function () {\n    dispatch(fetchInvoicesAsync(tenant == null ? void 0 : tenant.tenantUniqueId));\n  }, []);\n  var bg_light = styles.bg_light,\n      container = styles.container,\n      my_5 = styles.my_5,\n      p_15 = styles.p_15,\n      row_center_x_between = styles.row_center_x_between,\n      rounded = styles.rounded;\n  var darkGrey = colors.darkGrey,\n      secondary = colors.secondary;\n  if (isFetchingInvoices) return _jsx(LoadingScreen, {});\n  if (!invoices) return _jsx(NoData, {});\n  return _jsxs(View, {\n    style: container,\n    children: [_jsx(AppText, {\n      children: \"Hi\"\n    }), _jsx(FlatList, {\n      data: invoices,\n      keyExtractor: function keyExtractor(i) {\n        return i.id;\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(AppText, {\n          children: item.invoiceNumber\n        });\n      }\n    })]\n  });\n};\n\nexport default InvoicesScreen;\n{}","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/invoice/InvoicesScreen.tsx"],"names":["React","useEffect","colors","styles","AppText","useAppDispatch","useAppSelecter","fetchInvoicesAsync","LoadingScreen","NoData","InvoicesScreen","navigation","dispatch","state","tenant","invoice","invoices","isFetchingInvoices","isFetchingInvoiceDetails","navigate","tenantUniqueId","bg_light","container","my_5","p_15","row_center_x_between","rounded","darkGrey","secondary","i","id","item","invoiceNumber"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,OAAOC,MAAP;AACA,SAASC,MAAT;AAEA,OAAOC,OAAP;AACA,SAASC,cAAT,EAAyBC,cAAzB;AAEA,SAASC,kBAAT;AACA,OAAOC,aAAP;AACA,OAAOC,MAAP;;;;AAMA,IAAMC,cAA+B,GAAG,SAAlCA,cAAkC,OAAoB;AAAA,MAAjBC,UAAiB,QAAjBA,UAAiB;AACxD,MAAMC,QAAQ,GAAGP,cAAc,EAA/B;;AACA,wBAAmBC,cAAc,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACC,MAAjB;AAAA,GAAD,CAAjC;AAAA,MAAQA,MAAR,mBAAQA,MAAR;;AACA,yBAAmER,cAAc,CAAC,UAACO,KAAD;AAAA,WAAWA,KAAK,CAACE,OAAjB;AAAA,GAAD,CAAjF;AAAA,MAAQC,QAAR,oBAAQA,QAAR;AAAA,MAAkBC,kBAAlB,oBAAkBA,kBAAlB;AAAA,MAAsCC,wBAAtC,oBAAsCA,wBAAtC;;AAEAjB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAI,CAACa,MAAL,EAAaH,UAAU,CAACQ,QAAX,CAAoB,eAApB;AAChB,GAFQ,EAEN,CAACL,MAAD,CAFM,CAAT;AAIAb,EAAAA,SAAS,CAAC,YAAM;AACZW,IAAAA,QAAQ,CAACL,kBAAkB,CAACO,MAAD,oBAACA,MAAM,CAAEM,cAAT,CAAnB,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAQC,QAAR,GAA2ElB,MAA3E,CAAQkB,QAAR;AAAA,MAAkBC,SAAlB,GAA2EnB,MAA3E,CAAkBmB,SAAlB;AAAA,MAA6BC,IAA7B,GAA2EpB,MAA3E,CAA6BoB,IAA7B;AAAA,MAAmCC,IAAnC,GAA2ErB,MAA3E,CAAmCqB,IAAnC;AAAA,MAAyCC,oBAAzC,GAA2EtB,MAA3E,CAAyCsB,oBAAzC;AAAA,MAA+DC,OAA/D,GAA2EvB,MAA3E,CAA+DuB,OAA/D;AACA,MAAQC,QAAR,GAAgCzB,MAAhC,CAAQyB,QAAR;AAAA,MAAkBC,SAAlB,GAAgC1B,MAAhC,CAAkB0B,SAAlB;AAEA,MAAIX,kBAAJ,EAAwB,OAAO,KAAC,aAAD,KAAP;AACxB,MAAI,CAACD,QAAL,EAAe,OAAO,KAAC,MAAD,KAAP;AAEf,SACI,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEM,SAAb;AAAA,eACI,KAAC,OAAD;AAAA;AAAA,MADJ,EAGI,KAAC,QAAD;AACI,MAAA,IAAI,EAAEN,QADV;AAEI,MAAA,YAAY,EAAE,sBAACa,CAAD;AAAA,eAAOA,CAAC,CAACC,EAAT;AAAA,OAFlB;AAGI,MAAA,UAAU,EAAE;AAAA,YAAGC,IAAH,SAAGA,IAAH;AAAA,eACR,KAAC,OAAD;AAAA,oBAAUA,IAAI,CAACC;AAAf,UADQ;AAAA;AAHhB,MAHJ;AAAA,IADJ;AAcH,CAjCD;;AAmCA,eAAetB,cAAf;AAEA,CAcM","sourcesContent":["import React, { useEffect } from 'react';\nimport { FlatList, Text, TouchableOpacity, View } from 'react-native';\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport { FontAwesome } from '@expo/vector-icons';\nimport AppText from '../../components/text/AppText';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport { useDispatch } from 'react-redux';\nimport { fetchInvoicesAsync } from '../../reducers/invoiceSlice';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport NoData from '../../components/indicator/NoData';\n\ninterface Props {\n    navigation: any\n}\n\nconst InvoicesScreen: React.FC<Props> = ({ navigation }) => {\n    const dispatch = useAppDispatch()\n    const { tenant } = useAppSelecter((state) => state.tenant)\n    const { invoices, isFetchingInvoices, isFetchingInvoiceDetails } = useAppSelecter((state) => state.invoice)\n\n    useEffect(() => {\n        if (!tenant) navigation.navigate(\"AuthNavigator\")\n    }, [tenant])\n\n    useEffect(() => {\n        dispatch(fetchInvoicesAsync(tenant?.tenantUniqueId!))\n    }, [])\n\n    const { bg_light, container, my_5, p_15, row_center_x_between, rounded } = styles;\n    const { darkGrey, secondary } = colors;\n\n    if (isFetchingInvoices) return <LoadingScreen />\n    if (!invoices) return <NoData />\n\n    return (\n        <View style={container}>\n            <AppText>Hi</AppText>\n\n            <FlatList\n                data={invoices}\n                keyExtractor={(i) => i.id}\n                renderItem={({ item }) =>\n                    <AppText>{item.invoiceNumber}</AppText>\n                }\n            // ItemSeparatorComponent={() => <View style={separator} />}\n            />\n        </View>\n    );\n}\n\nexport default InvoicesScreen;\n\n{/* <FlatList\ndata={invoices}\nkeyExtractor={(i) => i.id}\nrenderItem={({ item }) =>\n    <TouchableOpacity onPress={() => { }}>\n        <View style={[bg_light, my_5, p_15, row_center_x_between, rounded]}>\n            <View>\n                <AppText bold>{item.invoiceNumber}</AppText>\n                <AppText as=\"h5\" bold color={darkGrey}>{item.dateCreated}</AppText>\n            </View>\n            <AppText as=\"h3\" bold color={secondary}>{item.amount}</AppText>\n        </View>\n    </TouchableOpacity>\n}\n/> */}"]},"metadata":{},"sourceType":"module"}