{"ast":null,"code":"import React, { useEffect } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useDispatch } from 'react-redux';\nimport ModeOfPaymentItem from \"../../components/item/ModeOfPaymentItem\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport { fetchModeOfPaymentsAsync } from \"../../reducers/modeOfPaymentSlice\";\nimport { useAppSelecter } from \"../../store/configureStore\";\nimport { styles } from \"../../styles/styles\";\nimport NoData from \"../../components/indicator/NoData\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar ModeOfPaymentsScreen = function ModeOfPaymentsScreen() {\n  var bg_light = styles.bg_light,\n      container = styles.container,\n      p_10 = styles.p_10,\n      separator = styles.separator;\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.modeOfPayment;\n  }),\n      modeOfPayments = _useAppSelecter.modeOfPayments,\n      isFetchingModeOfPayments = _useAppSelecter.isFetchingModeOfPayments;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    dispatch(fetchModeOfPaymentsAsync());\n  }, []);\n  if (isFetchingModeOfPayments) return _jsx(LoadingScreen, {});\n  if (!modeOfPayments) return _jsx(NoData, {});\n  return _jsx(View, {\n    style: container,\n    children: _jsx(View, {\n      style: [bg_light, p_10],\n      children: _jsx(FlatList, {\n        data: modeOfPayments,\n        keyExtractor: function keyExtractor(modeOfPayment) {\n          return modeOfPayment.id;\n        },\n        renderItem: function renderItem(_ref) {\n          var item = _ref.item;\n          return _jsx(ModeOfPaymentItem, {\n            bankName: item.bankName,\n            accountName: item.accountName,\n            accountNumber: item.accountNumber\n          });\n        },\n        ItemSeparatorComponent: function ItemSeparatorComponent() {\n          return _jsx(View, {\n            style: separator\n          });\n        }\n      })\n    })\n  });\n};\n\nexport default ModeOfPaymentsScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/modeOfPayment/ModeOfPayments.tsx"],"names":["React","useEffect","useDispatch","ModeOfPaymentItem","LoadingScreen","fetchModeOfPaymentsAsync","useAppSelecter","styles","NoData","ModeOfPaymentsScreen","bg_light","container","p_10","separator","state","modeOfPayment","modeOfPayments","isFetchingModeOfPayments","dispatch","id","item","bankName","accountName","accountNumber"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,iBAAP;AACA,OAAOC,aAAP;AACA,SAASC,wBAAT;AACA,SAASC,cAAT;AAEA,SAASC,MAAT;AACA,OAAOC,MAAP;;;AAGA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,GAAM;AAC/B,MAAQC,QAAR,GAAiDH,MAAjD,CAAQG,QAAR;AAAA,MAAkBC,SAAlB,GAAiDJ,MAAjD,CAAkBI,SAAlB;AAAA,MAA6BC,IAA7B,GAAiDL,MAAjD,CAA6BK,IAA7B;AAAA,MAAmCC,SAAnC,GAAiDN,MAAjD,CAAmCM,SAAnC;;AAEA,wBAAqDP,cAAc,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACC,aAAV;AAAA,GAAN,CAAnE;AAAA,MAAQC,cAAR,mBAAQA,cAAR;AAAA,MAAwBC,wBAAxB,mBAAwBA,wBAAxB;;AACA,MAAMC,QAAQ,GAAGhB,WAAW,EAA5B;AAGAD,EAAAA,SAAS,CAAC,YAAM;AACZiB,IAAAA,QAAQ,CAACb,wBAAwB,EAAzB,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAIY,wBAAJ,EAA8B,OAAO,KAAC,aAAD,KAAP;AAE9B,MAAI,CAACD,cAAL,EAAqB,OAAO,KAAC,MAAD,KAAP;AAErB,SACI,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEL,SAAb;AAAA,cACI,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAACD,QAAD,EAAWE,IAAX,CAAb;AAAA,gBAEI,KAAC,QAAD;AACI,QAAA,IAAI,EAAEI,cADV;AAEI,QAAA,YAAY,EAAE,sBAACD,aAAD;AAAA,iBAAmBA,aAAa,CAACI,EAAjC;AAAA,SAFlB;AAGI,QAAA,UAAU,EAAE;AAAA,cAAGC,IAAH,QAAGA,IAAH;AAAA,iBACR,KAAC,iBAAD;AAAmB,YAAA,QAAQ,EAAEA,IAAI,CAACC,QAAlC;AAA4C,YAAA,WAAW,EAAED,IAAI,CAACE,WAA9D;AAA2E,YAAA,aAAa,EAAEF,IAAI,CAACG;AAA/F,YADQ;AAAA,SAHhB;AAMI,QAAA,sBAAsB,EAAE;AAAA,iBAAM,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEV;AAAb,YAAN;AAAA;AAN5B;AAFJ;AADJ,IADJ;AAgBH,CA/BD;;AAiCA,eAAeJ,oBAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport { FlatList, View } from 'react-native';\nimport { useDispatch } from 'react-redux';\n\nimport ModeOfPaymentItem from '../../components/item/ModeOfPaymentItem';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport { fetchModeOfPaymentsAsync } from '../../reducers/modeOfPaymentSlice';\nimport { useAppSelecter } from '../../store/configureStore';\n\nimport { styles } from '../../styles/styles';\nimport NoData from '../../components/indicator/NoData';\n\n\nconst ModeOfPaymentsScreen = () => {\n    const { bg_light, container, p_10, separator } = styles\n\n    const { modeOfPayments, isFetchingModeOfPayments } = useAppSelecter(state => state.modeOfPayment);\n    const dispatch = useDispatch()\n\n\n    useEffect(() => {\n        dispatch(fetchModeOfPaymentsAsync());\n    }, [])\n\n    if (isFetchingModeOfPayments) return <LoadingScreen />\n\n    if (!modeOfPayments) return <NoData />\n\n    return (\n        <View style={container}>\n            <View style={[bg_light, p_10]}>\n\n                <FlatList\n                    data={modeOfPayments}\n                    keyExtractor={(modeOfPayment) => modeOfPayment.id}\n                    renderItem={({ item }) =>\n                        <ModeOfPaymentItem bankName={item.bankName} accountName={item.accountName} accountNumber={item.accountNumber} />\n                    }\n                    ItemSeparatorComponent={() => <View style={separator} />}\n                />\n            </View>\n        </View>\n\n    );\n}\n\nexport default ModeOfPaymentsScreen;"]},"metadata":{},"sourceType":"module"}