{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport AppText from \"../../components/text/AppText\";\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport { fetchInvoiceDetailsAsync, fetchInvoicesAsync } from \"../../reducers/invoiceSlice\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport NoData from \"../../components/indicator/NoData\";\nimport { dateFormatter } from \"../../utils/dateFormatter\";\nimport routes from \"../../navigations/routes\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar InvoicesScreen = function InvoicesScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useAppDispatch();\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var _useAppSelecter2 = useAppSelecter(function (state) {\n    return state.invoice;\n  }),\n      invoices = _useAppSelecter2.invoices,\n      isFetchingInvoices = _useAppSelecter2.isFetchingInvoices,\n      isFetchingInvoiceDetails = _useAppSelecter2.isFetchingInvoiceDetails;\n\n  useEffect(function () {\n    if (!tenant) navigation.navigate(\"AuthNavigator\");\n  }, [tenant]);\n  useEffect(function () {\n    dispatch(fetchInvoicesAsync(tenant == null ? void 0 : tenant.tenantUniqueId));\n  }, []);\n  var badge = styles.badge,\n      bg_light = styles.bg_light,\n      bg_red = styles.bg_red,\n      bg_yellow = styles.bg_yellow,\n      container = styles.container,\n      me_5 = styles.me_5,\n      my_5 = styles.my_5,\n      p_15 = styles.p_15,\n      row_center_x = styles.row_center_x,\n      row_center_x_between = styles.row_center_x_between,\n      rounded = styles.rounded;\n  var blue = colors.blue,\n      darkGrey = colors.darkGrey,\n      green = colors.green,\n      light = colors.light,\n      secondary = colors.secondary;\n\n  var renderInvoiceStatus = function renderInvoiceStatus(status) {\n    if (status === 0) return;\n\n    _jsx(View, {\n      style: [badge, bg_red],\n      children: _jsx(AppText, {\n        as: \"h5\",\n        color: light,\n        children: \"Unpaid\"\n      })\n    });\n\n    if (status === 1) return;\n\n    _jsx(View, {\n      style: [badge, bg_yellow],\n      children: _jsx(AppText, {\n        as: \"h5\",\n        color: light,\n        children: \"Pending\"\n      })\n    });\n\n    if (status === 2) return;\n\n    _jsx(View, {\n      style: [badge, bg_yellow],\n      children: _jsx(AppText, {\n        as: \"h5\",\n        color: blue,\n        children: \"Partially Paid\"\n      })\n    });\n\n    return _jsx(View, {\n      style: [badge, bg_yellow],\n      children: _jsx(AppText, {\n        as: \"h5\",\n        color: green,\n        children: \"Paid\"\n      })\n    });\n  };\n\n  var handleInvoiceDetails = function handleInvoiceDetails(id) {\n    return _regeneratorRuntime.async(function handleInvoiceDetails$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            navigation.navigate(routes.INVOICE_DETAILS);\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(dispatch(fetchInvoiceDetailsAsync(id)));\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (isFetchingInvoices) return _jsx(LoadingScreen, {});\n  if (!invoices) return _jsx(NoData, {});\n  return _jsx(View, {\n    style: container,\n    children: _jsx(FlatList, {\n      data: invoices,\n      keyExtractor: function keyExtractor(i) {\n        return i.id;\n      },\n      renderItem: function renderItem(_ref2) {\n        var item = _ref2.item;\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleInvoiceDetails(item.invoiceStatus);\n          },\n          children: _jsxs(View, {\n            style: [bg_light, my_5, p_15, rounded],\n            children: [_jsxs(View, {\n              style: row_center_x,\n              children: [_jsx(View, {\n                style: me_5,\n                children: _jsx(AppText, {\n                  as: \"h5\",\n                  bold: true,\n                  color: darkGrey,\n                  children: dateFormatter(item.dateCreated)\n                })\n              }), _jsx(AppText, {\n                as: \"h5\",\n                bold: true,\n                children: renderInvoiceStatus(item.invoiceStatus)\n              })]\n            }), _jsxs(View, {\n              style: row_center_x_between,\n              children: [_jsx(View, {\n                children: _jsx(AppText, {\n                  bold: true,\n                  children: item.invoiceNumber\n                })\n              }), _jsx(AppText, {\n                as: \"h3\",\n                bold: true,\n                color: secondary,\n                children: item.amount\n              })]\n            })]\n          })\n        });\n      }\n    })\n  });\n};\n\nexport default InvoicesScreen;\n{}","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/invoice/InvoicesScreen.tsx"],"names":["React","useEffect","colors","styles","AppText","useAppDispatch","useAppSelecter","fetchInvoiceDetailsAsync","fetchInvoicesAsync","LoadingScreen","NoData","dateFormatter","routes","InvoicesScreen","navigation","dispatch","state","tenant","invoice","invoices","isFetchingInvoices","isFetchingInvoiceDetails","navigate","tenantUniqueId","badge","bg_light","bg_red","bg_yellow","container","me_5","my_5","p_15","row_center_x","row_center_x_between","rounded","blue","darkGrey","green","light","secondary","renderInvoiceStatus","status","handleInvoiceDetails","id","INVOICE_DETAILS","i","item","invoiceStatus","dateCreated","invoiceNumber","amount"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { FlatList, TouchableOpacity, View } from 'react-native';\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport AppText from '../../components/text/AppText';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport { fetchInvoiceDetailsAsync, fetchInvoicesAsync } from '../../reducers/invoiceSlice';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport NoData from '../../components/indicator/NoData';\nimport { dateFormatter } from '../../utils/dateFormatter';\nimport routes from '../../navigations/routes';\n\ninterface Props {\n    navigation: any\n}\n\nconst InvoicesScreen: React.FC<Props> = ({ navigation }) => {\n    const dispatch = useAppDispatch()\n    const { tenant } = useAppSelecter((state) => state.tenant)\n    const { invoices, isFetchingInvoices, isFetchingInvoiceDetails } = useAppSelecter((state) => state.invoice)\n\n    useEffect(() => {\n        if (!tenant) navigation.navigate(\"AuthNavigator\")\n    }, [tenant])\n\n    useEffect(() => {\n        dispatch(fetchInvoicesAsync(tenant?.tenantUniqueId!))\n    }, [])\n\n    const { badge, bg_light, bg_red, bg_yellow, container, me_5, my_5, p_15, row_center_x, row_center_x_between, rounded } = styles;\n    const { blue, darkGrey, green, light, secondary } = colors;\n\n    const renderInvoiceStatus = (status: number) => {\n        if (status === 0) return\n        (\n            <View style={[badge, bg_red]}>\n                <AppText as=\"h5\" color={light}>Unpaid</AppText>\n            </View>\n        )\n\n        if (status === 1) return\n        (\n            <View style={[badge, bg_yellow]}>\n                <AppText as=\"h5\" color={light}>Pending</AppText>\n            </View>\n        )\n\n        if (status === 2) return\n        (\n            <View style={[badge, bg_yellow]}>\n                <AppText as=\"h5\" color={blue}>Partially Paid</AppText>\n            </View>\n        )\n\n        return (\n            <View style={[badge, bg_yellow]}>\n                <AppText as=\"h5\" color={green}>Paid</AppText>\n            </View>)\n    }\n\n    const handleInvoiceDetails = async (id: string) => {\n        navigation.navigate(routes.INVOICE_DETAILS)\n        await dispatch(fetchInvoiceDetailsAsync(id))\n    }\n\n    if (isFetchingInvoices) return <LoadingScreen />\n    if (!invoices) return <NoData />\n\n    return (\n        <View style={container}>\n            <FlatList\n                data={invoices}\n                keyExtractor={(i) => i.id}\n                renderItem={({ item }) =>\n                    <TouchableOpacity onPress={() => handleInvoiceDetails(item.invoiceStatus)}>\n\n                        <View style={[bg_light, my_5, p_15, rounded]}>\n                            <View style={row_center_x}>\n                                <View style={me_5}>\n                                    <AppText as=\"h5\" bold color={darkGrey}>{dateFormatter(item.dateCreated)}</AppText>\n                                </View>\n\n                                <AppText as=\"h5\" bold>{renderInvoiceStatus(item.invoiceStatus)}</AppText>\n                            </View>\n\n                            <View style={row_center_x_between}>\n                                <View>\n                                    <AppText bold>{item.invoiceNumber}</AppText>\n                                </View>\n\n                                <AppText as=\"h3\" bold color={secondary}>{item.amount}</AppText>\n                            </View>\n                        </View>\n                    </TouchableOpacity>\n                }\n            />\n        </View>\n    );\n}\n\nexport default InvoicesScreen;\n\n{/* <FlatList\ndata={invoices}\nkeyExtractor={(i) => i.id}\nrenderItem={({ item }) =>\n    <TouchableOpacity onPress={() => { }}>\n        <View style={[bg_light, my_5, p_15, row_center_x_between, rounded]}>\n            <View>\n                <AppText bold>{item.invoiceNumber}</AppText>\n                <AppText as=\"h5\" bold color={darkGrey}>{item.dateCreated}</AppText>\n            </View>\n            <AppText as=\"h3\" bold color={secondary}>{item.amount}</AppText>\n        </View>\n    </TouchableOpacity>\n}\n/> */}"]},"metadata":{},"sourceType":"module"}