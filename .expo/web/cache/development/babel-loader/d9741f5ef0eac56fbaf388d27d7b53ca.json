{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport agent from \"../api/agent\";\nvar initialState = {\n  announcements: [],\n  announcement: undefined,\n  isFetchingAnnouncements: false,\n  isFetchingAnnouncementDetails: false,\n  isSaving: false,\n  errorMessage: \"\"\n};\nexport var fetchAnnouncementsAsync = createAsyncThunk('announcements/fetchAnnouncementsAsync', function _callee(_, thunkAPI) {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(agent.Announcement.list());\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n          _context.prev = 6;\n          _context.t0 = _context[\"catch\"](0);\n          return _context.abrupt(\"return\", thunkAPI.rejectWithValue({\n            error: _context.t0.data\n          }));\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n});\nexport var fetchAnnouncementDetailsAsync = createAsyncThunk('announcements/fetchAnnouncementDetailsAsync', function _callee2(id, thunkAPI) {\n  return _regeneratorRuntime.async(function _callee2$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(agent.Announcement.details(id));\n\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 6:\n          _context2.prev = 6;\n          _context2.t0 = _context2[\"catch\"](0);\n          return _context2.abrupt(\"return\", thunkAPI.rejectWithValue({\n            error: _context2.t0.data\n          }));\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[0, 6]], Promise);\n});\nexport var announcementSlice = createSlice({\n  name: 'announcement',\n  initialState: initialState,\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(fetchAnnouncementsAsync.pending, function (state, action) {\n      state.isFetchingAnnouncements = true;\n    });\n    builder.addCase(fetchAnnouncementsAsync.fulfilled, function (state, action) {\n      state.announcements = action.payload;\n      state.isFetchingAnnouncements = false;\n    });\n    builder.addCase(fetchAnnouncementsAsync.rejected, function (state, action) {\n      state.isFetchingAnnouncements = false;\n    });\n    builder.addCase(fetchAnnouncementDetailsAsync.pending, function (state, action) {\n      state.isFetchingAnnouncementDetails = true;\n    });\n    builder.addCase(fetchAnnouncementDetailsAsync.fulfilled, function (state, action) {\n      state.announcement = action.payload;\n      state.isFetchingAnnouncementDetails = false;\n    });\n    builder.addCase(fetchAnnouncementDetailsAsync.rejected, function (state, action) {\n      state.isFetchingAnnouncementDetails = false;\n    });\n  }\n});\n\n_objectDestructuringEmpty(announcementSlice.actions);\n\nexport {};","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/reducers/announcementSlice.ts"],"names":["createAsyncThunk","createSlice","agent","initialState","announcements","announcement","undefined","isFetchingAnnouncements","isFetchingAnnouncementDetails","isSaving","errorMessage","fetchAnnouncementsAsync","_","thunkAPI","Announcement","list","rejectWithValue","error","data","fetchAnnouncementDetailsAsync","id","details","announcementSlice","name","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","rejected","actions"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\"\nimport agent from \"../api/agent\";\nimport { IAnnouncement } from \"../components/models/Announcement\";\n\nexport interface IAnnouncementState {\n    announcements: IAnnouncement[];\n    announcement?: IAnnouncement;\n    isFetchingAnnouncements: boolean;\n    isFetchingAnnouncementDetailsisFetchingDetails: boolean;\n    isSaving: boolean;\n    errorMessage?: string;\n  }\n\nconst initialState = {\n    announcements: [] as Array<IAnnouncement>,\n    announcement: undefined,\n    isFetchingAnnouncements: false,\n    isFetchingAnnouncementDetails: false,\n    isSaving: false,\n    errorMessage: \"\"\n}\n\nexport const fetchAnnouncementsAsync = createAsyncThunk<IAnnouncement[]>(\n    'announcements/fetchAnnouncementsAsync',\n    async (_, thunkAPI) => {\n      try {\n        return await agent.Announcement.list();\n      } catch (error: any) {\n        return thunkAPI.rejectWithValue({error: error.data})\n      }\n    }\n  )\n\n  export const fetchAnnouncementDetailsAsync = createAsyncThunk<IAnnouncement, string>(\n    'announcements/fetchAnnouncementDetailsAsync',\n    async (id, thunkAPI) => {\n      try {\n        return await agent.Announcement.details(id);\n      } catch (error: any) {\n        return thunkAPI.rejectWithValue({error: error.data})\n      }\n    }\n  )\n\nexport const announcementSlice = createSlice({\n    name: 'announcement',\n    initialState,\n    reducers: {},\n\n    extraReducers: (builder => {\n        builder.addCase(fetchAnnouncementsAsync.pending, (state, action) => {\n            state.isFetchingAnnouncements = true;\n          });\n          builder.addCase(fetchAnnouncementsAsync.fulfilled, (state, action) => {\n            state.announcements = action.payload as any;\n            state.isFetchingAnnouncements = false;\n          });\n          builder.addCase(fetchAnnouncementsAsync.rejected, (state, action) => {\n            state.isFetchingAnnouncements = false;\n          });\n\n\n          builder.addCase(fetchAnnouncementDetailsAsync.pending, (state, action) => {\n            state.isFetchingAnnouncementDetails = true;\n          });\n          builder.addCase(fetchAnnouncementDetailsAsync.fulfilled, (state, action) => {\n            state.announcement = action.payload as any;\n            state.isFetchingAnnouncementDetails = false;\n          });\n          builder.addCase(fetchAnnouncementDetailsAsync.rejected, (state, action) => {\n            state.isFetchingAnnouncementDetails = false;\n          });\n    })\n})\n\nexport const { } = announcementSlice.actions;"]},"metadata":{},"sourceType":"module"}