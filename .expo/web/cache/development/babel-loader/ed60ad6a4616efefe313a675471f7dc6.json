{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport FormTextInput from \"../../components/input/FormTextInput\";\nimport AppText from \"../../components/text/AppText\";\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport * as Yup from 'yup';\nimport RNPickerSelect from 'react-native-picker-select';\nimport * as ImagePicker from 'expo-image-picker';\nimport AppButton from \"../../components/button/AppButton\";\nimport { fetchInvoiceDetailsAsync } from \"../../reducers/invoiceSlice\";\nimport { Formik } from 'formik';\nimport { fetchModeOfPaymentsAsync } from \"../../reducers/modeOfPaymentSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar PaymentFormScreen = function PaymentFormScreen() {\n  var dispatch = useAppDispatch();\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var _useAppSelecter2 = useAppSelecter(function (state) {\n    return state.invoice;\n  }),\n      invoice = _useAppSelecter2.invoice,\n      isFetchingInvoiceDetails = _useAppSelecter2.isFetchingInvoiceDetails;\n\n  var _useAppSelecter3 = useAppSelecter(function (state) {\n    return state.modeOfPayment;\n  }),\n      modeOfPayments = _useAppSelecter3.modeOfPayments,\n      isFetchingModeOfPayments = _useAppSelecter3.isFetchingModeOfPayments;\n\n  var _useState = useState({\n    modeOfPaymentId: \"\",\n    amount: 0,\n    file: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      payment = _useState2[0],\n      setPayment = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      image = _useState4[0],\n      setImage = _useState4[1];\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      amount = _useState6[0],\n      setAmount = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      modeOfPaymentId = _useState8[0],\n      setModeOfPaymentId = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      imageData = _useState10[0],\n      setImageData = _useState10[1];\n\n  var validationSchema = Yup.object().shape({\n    modeOfPayment: Yup.string().required().label('Mode of Payment'),\n    amount: Yup.number().required().label('Amount'),\n    file: Yup.string().required().label('Proof of Payment')\n  });\n  var bg_light = styles.bg_light,\n      center_x = styles.center_x,\n      container = styles.container,\n      my_5 = styles.my_5,\n      p_5 = styles.p_5,\n      px_5 = styles.px_5,\n      row_center_x = styles.row_center_x,\n      w_25 = styles.w_25,\n      w_100p = styles.w_100p;\n  var darkGrey = colors.darkGrey,\n      primary = colors.primary;\n  useEffect(function () {\n    dispatch(fetchModeOfPaymentsAsync());\n  }, []);\n  useEffect(function () {\n    if (!invoice) fetchInvoiceDetailsAsync(tenant == null ? void 0 : tenant.tenantUniqueId);\n  }, [invoice]);\n\n  var _onSubmit = function onSubmit(values) {\n    return _regeneratorRuntime.async(function onSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(values);\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (isFetchingInvoiceDetails || !invoice) return _jsx(LoadingScreen, {});\n  var invoiceNumber = invoice.invoiceNumber;\n  return _jsxs(View, {\n    style: container,\n    children: [_jsxs(View, {\n      style: [my_5],\n      children: [_jsx(AppText, {\n        as: \"h5\",\n        bold: true,\n        color: darkGrey,\n        children: \"Invoice Number\"\n      }), _jsx(AppText, {\n        bold: true,\n        children: invoiceNumber\n      })]\n    }), _jsx(Formik, {\n      initialValues: payment,\n      onSubmit: function onSubmit(values) {\n        return _onSubmit(values);\n      },\n      validationSchema: validationSchema,\n      children: function children(_ref) {\n        var handleChange = _ref.handleChange,\n            handleSubmit = _ref.handleSubmit,\n            setFieldTouched = _ref.setFieldTouched,\n            errors = _ref.errors,\n            touched = _ref.touched,\n            values = _ref.values;\n        return _jsxs(_Fragment, {\n          children: [_jsxs(View, {\n            style: my_5,\n            children: [_jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              color: darkGrey,\n              children: \"Mode of Payment\"\n            }), _jsx(View, {\n              style: [bg_light, my_5, p_5],\n              children: _jsx(RNPickerSelect, {\n                onValueChange: function onValueChange(value) {\n                  return setModeOfPaymentId(value);\n                },\n                items: modeOfPayments.map(function (i) {\n                  return {\n                    label: i.bankName,\n                    value: i.id\n                  };\n                })\n              })\n            })]\n          }), _jsx(FormTextInput, {\n            icon: _jsx(MaterialIcons, {\n              name: \"money\",\n              size: 20,\n              color: primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('amount');\n            },\n            onChangeText: handleChange('amount'),\n            label: \"Amount\",\n            placeholder: \"Amount\",\n            errorMessage: touched && errors.amount\n          }), _jsxs(View, {\n            style: my_5,\n            children: [_jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              color: darkGrey,\n              children: \"Mode of Payment\"\n            }), _jsxs(View, {\n              style: {\n                flex: 1,\n                alignItems: 'center',\n                justifyContent: 'center'\n              },\n              children: [_jsx(Button, {\n                title: \"Pick an image from camera roll\",\n                onPress: pickImage\n              }), image && _jsx(Image, {\n                source: {\n                  uri: image\n                },\n                style: {\n                  width: 200,\n                  height: 200\n                }\n              })]\n            })]\n          })]\n        });\n      }\n    }), _jsx(AppButton, {\n      onPress: function onPress() {},\n      title: \"Submit\"\n    })]\n  });\n};\n\nexport default PaymentFormScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/payment/PaymentFormScreen.tsx"],"names":["React","useEffect","useState","LoadingScreen","FormTextInput","AppText","useAppDispatch","useAppSelecter","colors","styles","MaterialIcons","Yup","RNPickerSelect","ImagePicker","AppButton","fetchInvoiceDetailsAsync","Formik","fetchModeOfPaymentsAsync","PaymentFormScreen","dispatch","state","tenant","invoice","isFetchingInvoiceDetails","modeOfPayment","modeOfPayments","isFetchingModeOfPayments","modeOfPaymentId","amount","file","payment","setPayment","image","setImage","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","console","log","cancelled","uri","setAmount","setModeOfPaymentId","imageData","setImageData","validationSchema","object","shape","string","required","label","number","bg_light","center_x","container","my_5","p_5","px_5","row_center_x","w_25","w_100p","darkGrey","primary","tenantUniqueId","onSubmit","values","invoiceNumber","handleChange","handleSubmit","setFieldTouched","errors","touched","value","map","i","bankName","id","flex","alignItems","justifyContent","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Image, Text, View } from 'react-native';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport FormTextInput from '../../components/input/FormTextInput';\nimport AppText from '../../components/text/AppText';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as Yup from 'yup';\nimport RNPickerSelect from 'react-native-picker-select';\nimport * as ImagePicker from 'expo-image-picker';\n\n\n\n\nimport AppButton from '../../components/button/AppButton';\nimport { fetchInvoiceDetailsAsync } from '../../reducers/invoiceSlice';\nimport { Formik } from 'formik';\nimport { fetchModeOfPaymentsAsync } from '../../reducers/modeOfPaymentSlice';\n\n\nconst PaymentFormScreen = () => {\n    const dispatch = useAppDispatch()\n    const { tenant } = useAppSelecter((state) => state.tenant)\n    const { invoice, isFetchingInvoiceDetails } = useAppSelecter((state) => state.invoice)\n    const { modeOfPayments, isFetchingModeOfPayments } = useAppSelecter(state => state.modeOfPayment);\n\n    const [payment, setPayment] = useState({\n        modeOfPaymentId: \"\",\n        amount: 0,\n        file: \"\"\n    })\n\n    const [image, setImage] = useState(null);\n\n    const pickImage = async () => {\n        // No permissions request is necessary for launching the image library\n        let result = await ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\n            allowsEditing: true,\n            aspect: [4, 3],\n            quality: 1,\n        });\n\n        console.log(result);\n\n        if (!result.cancelled) {\n            setImage(result.uri);\n        }\n    };\n\n\n    const [amount, setAmount] = useState(\"\")\n    const [modeOfPaymentId, setModeOfPaymentId] = useState(\"\")\n    const [imageData, setImageData] = useState(null);\n\n    const validationSchema = Yup.object().shape({\n        modeOfPayment: Yup.string().required().label('Mode of Payment'),\n        amount: Yup.number().required().label('Amount'),\n        file: Yup.string().required().label('Proof of Payment'),\n    });\n\n    const { bg_light, center_x, container, my_5, p_5, px_5, row_center_x, w_25, w_100p } = styles\n    const { darkGrey, primary } = colors\n\n    useEffect(() => {\n        dispatch(fetchModeOfPaymentsAsync())\n    }, [])\n\n    useEffect(() => {\n        if (!invoice) fetchInvoiceDetailsAsync(tenant?.tenantUniqueId!)\n    }, [invoice])\n\n    const onSubmit = async (values: any) => {\n        console.log(values)\n    }\n\n    if (isFetchingInvoiceDetails || !invoice) return <LoadingScreen />\n    const { invoiceNumber } = invoice\n\n\n    return (\n        <View style={container}>\n\n            <View style={[my_5]}>\n                <AppText as=\"h5\" bold color={darkGrey} >Invoice Number</AppText>\n                <AppText bold >{invoiceNumber}</AppText>\n            </View>\n\n            <Formik\n                initialValues={payment}\n                onSubmit={values => onSubmit(values)}\n                validationSchema={validationSchema}\n            >\n                {\n                    ({ handleChange, handleSubmit, setFieldTouched, errors, touched, values }) => (\n                        <>\n                            <View style={my_5}>\n                                <AppText as=\"h5\" bold color={darkGrey} >Mode of Payment</AppText>\n                                <View style={[bg_light, my_5, p_5]} >\n                                    <RNPickerSelect\n                                        onValueChange={(value) => setModeOfPaymentId(value)}\n                                        items={modeOfPayments.map(i => {\n                                            return { label: i.bankName, value: i.id }\n                                        })\n                                        }\n                                    />\n                                </View>\n                            </View>\n\n                            <FormTextInput\n                                icon={<MaterialIcons name=\"money\" size={20} color={primary} />}\n                                onBlur={() => setFieldTouched('amount')}\n                                onChangeText={handleChange('amount')}\n                                label='Amount'\n                                placeholder='Amount'\n                                errorMessage={touched && errors.amount}\n                            />\n\n                            <View style={my_5}>\n                                <AppText as=\"h5\" bold color={darkGrey} >Mode of Payment</AppText>\n                                <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n                                    <Button title=\"Pick an image from camera roll\" onPress={pickImage} />\n                                    {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n                                </View>\n                            </View>\n                        </>\n                    )\n                }\n            </Formik>\n\n\n\n            {/* <View style={my_5}>\n                <AppText as=\"h5\" bold color={darkGrey} >Proof of Payment</AppText>\n                <View style={[bg_light, p_30, row_center]}>\n                    <MaterialCommunityIcons name=\"camera-account\" size={50} color={darkGrey} />\n                </View>\n            </View> */}\n\n            <AppButton onPress={() => { }} title='Submit' />\n\n        </View>\n    );\n}\n\nexport default PaymentFormScreen;"]},"metadata":{},"sourceType":"module"}