{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport FormTextInput from \"../../components/input/FormTextInput\";\nimport AppText from \"../../components/text/AppText\";\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport RNPickerSelect from 'react-native-picker-select';\nimport * as ImagePicker from 'expo-image-picker';\nimport { FontAwesome } from '@expo/vector-icons';\nimport AppButton from \"../../components/button/AppButton\";\nimport { fetchInvoiceDetailsAsync, fetchInvoicesAsync, createPaymentAsync } from \"../../reducers/invoiceSlice\";\nimport { Formik } from 'formik';\nimport { fetchModeOfPaymentsAsync } from \"../../reducers/modeOfPaymentSlice\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar PaymentFormScreen = function PaymentFormScreen() {\n  var dispatch = useAppDispatch();\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var _useAppSelecter2 = useAppSelecter(function (state) {\n    return state.invoice;\n  }),\n      invoice = _useAppSelecter2.invoice,\n      isFetchingInvoiceDetails = _useAppSelecter2.isFetchingInvoiceDetails;\n\n  var _useAppSelecter3 = useAppSelecter(function (state) {\n    return state.modeOfPayment;\n  }),\n      modeOfPayments = _useAppSelecter3.modeOfPayments;\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      modeOfPaymentId = _useState2[0],\n      setModeOfPaymentId = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      amount = _useState4[0],\n      setAmount = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      imageData = _useState6[0],\n      setImageData = _useState6[1];\n\n  var _useState7 = useState({\n    modeOfPaymentId: \"\",\n    amount: 0,\n    file: \"\"\n  }),\n      _useState8 = _slicedToArray(_useState7, 2),\n      payment = _useState8[0],\n      setPayment = _useState8[1];\n\n  var bg_light = styles.bg_light,\n      container = styles.container,\n      my_5 = styles.my_5,\n      p_5 = styles.p_5,\n      row_center = styles.row_center,\n      p_30 = styles.p_30;\n  var darkGrey = colors.darkGrey,\n      primary = colors.primary;\n  useEffect(function () {\n    dispatch(fetchModeOfPaymentsAsync());\n  }, []);\n  useEffect(function () {\n    if (!invoice) fetchInvoiceDetailsAsync(tenant == null ? void 0 : tenant.tenantUniqueId);\n  }, [invoice]);\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      image = _useState10[0],\n      setImage = _useState10[1];\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context.sent;\n            setImage(result.uri);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _onSubmit = function onSubmit() {\n    return _regeneratorRuntime.async(function onSubmit$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log(\"Hi\");\n            console.log(\"amount\", amount);\n            console.log(\"image\", image);\n\n            if (!(!!setModeOfPaymentId && !!amount && !!image)) {\n              _context2.next = 9;\n              break;\n            }\n\n            console.log(\"Hello\");\n            _context2.next = 7;\n            return _regeneratorRuntime.awrap(dispatch(createPaymentAsync({\n              invoiceId: invoice == null ? void 0 : invoice.id,\n              modeOfPaymentId: modeOfPaymentId,\n              amount: amount,\n              file: imageData\n            })));\n\n          case 7:\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(dispatch(fetchInvoicesAsync(tenant == null ? void 0 : tenant.tenantUniqueId)));\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (isFetchingInvoiceDetails || !invoice) return _jsx(LoadingScreen, {});\n  var invoiceNumber = invoice.invoiceNumber;\n  return _jsxs(View, {\n    style: container,\n    children: [_jsxs(View, {\n      style: [my_5],\n      children: [_jsx(AppText, {\n        as: \"h5\",\n        bold: true,\n        color: darkGrey,\n        children: \"Invoice Number\"\n      }), _jsx(AppText, {\n        bold: true,\n        children: invoiceNumber\n      })]\n    }), _jsx(Formik, {\n      initialValues: payment,\n      onSubmit: function onSubmit(values) {\n        _onSubmit();\n      },\n      children: function children(_ref) {\n        var handleChange = _ref.handleChange,\n            handleSubmit = _ref.handleSubmit,\n            setFieldTouched = _ref.setFieldTouched,\n            errors = _ref.errors,\n            touched = _ref.touched,\n            values = _ref.values;\n        return _jsxs(_Fragment, {\n          children: [_jsxs(View, {\n            style: my_5,\n            children: [_jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              color: darkGrey,\n              children: \"Mode of Payment\"\n            }), _jsx(View, {\n              style: [bg_light, my_5, p_5],\n              children: _jsx(RNPickerSelect, {\n                onValueChange: function onValueChange(value) {\n                  return setModeOfPaymentId(value);\n                },\n                items: modeOfPayments.map(function (i) {\n                  return {\n                    label: i.bankName,\n                    value: i.id\n                  };\n                }),\n                value: values.modeOfPaymentId\n              })\n            })]\n          }), _jsx(FormTextInput, {\n            icon: _jsx(MaterialIcons, {\n              name: \"money\",\n              size: 20,\n              color: primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('amount');\n            },\n            onChangeText: function onChangeText(value) {\n              return setAmount(value);\n            },\n            label: \"Amount\",\n            placeholder: \"Amount\",\n            errorMessage: touched && errors.amount,\n            value: amount\n          }), _jsxs(View, {\n            style: my_5,\n            children: [_jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              color: darkGrey,\n              children: \"Mode of Payment\"\n            }), _jsxs(View, {\n              style: bg_light,\n              children: [_jsx(TouchableOpacity, {\n                onPress: pickImage,\n                children: _jsx(View, {\n                  style: [row_center, p_30],\n                  children: _jsx(FontAwesome, {\n                    name: \"camera\",\n                    size: 50,\n                    color: darkGrey\n                  })\n                })\n              }), image && _jsx(Image, {\n                source: {\n                  uri: image\n                },\n                style: {\n                  width: 200,\n                  height: 200\n                }\n              })]\n            })]\n          }), _jsx(AppButton, {\n            onPress: handleSubmit,\n            title: \"Submit\"\n          })]\n        });\n      }\n    })]\n  });\n};\n\nexport default PaymentFormScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/payment/PaymentFormScreen.tsx"],"names":["React","useEffect","useState","LoadingScreen","FormTextInput","AppText","useAppDispatch","useAppSelecter","colors","styles","MaterialIcons","RNPickerSelect","ImagePicker","FontAwesome","AppButton","fetchInvoiceDetailsAsync","fetchInvoicesAsync","createPaymentAsync","Formik","fetchModeOfPaymentsAsync","PaymentFormScreen","dispatch","state","tenant","invoice","isFetchingInvoiceDetails","modeOfPayment","modeOfPayments","modeOfPaymentId","setModeOfPaymentId","amount","setAmount","imageData","setImageData","file","payment","setPayment","bg_light","container","my_5","p_5","row_center","p_30","darkGrey","primary","tenantUniqueId","image","setImage","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","uri","onSubmit","console","log","invoiceId","id","invoiceNumber","values","handleChange","handleSubmit","setFieldTouched","errors","touched","value","map","i","label","bankName","width","height"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Image, Text, TouchableOpacity, View } from 'react-native';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport FormTextInput from '../../components/input/FormTextInput';\nimport AppText from '../../components/text/AppText';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as Yup from 'yup';\nimport RNPickerSelect from 'react-native-picker-select';\nimport * as ImagePicker from 'expo-image-picker';\n\nimport { FontAwesome } from '@expo/vector-icons';\n\n\n\nimport AppButton from '../../components/button/AppButton';\nimport { fetchInvoiceDetailsAsync, fetchInvoicesAsync, createPaymentAsync } from '../../reducers/invoiceSlice';\nimport { Formik } from 'formik';\nimport { fetchModeOfPaymentsAsync } from '../../reducers/modeOfPaymentSlice';\n\n\nconst PaymentFormScreen = () => {\n    const dispatch = useAppDispatch()\n    const { tenant } = useAppSelecter((state) => state.tenant)\n    const { invoice, isFetchingInvoiceDetails } = useAppSelecter((state) => state.invoice)\n    const { modeOfPayments } = useAppSelecter(state => state.modeOfPayment);\n\n    const [modeOfPaymentId, setModeOfPaymentId] = useState(\"\")\n    const [amount, setAmount] = useState(\"\")\n    const [imageData, setImageData] = useState(null);\n\n    const [payment, setPayment] = useState({\n        modeOfPaymentId: \"\",\n        amount: 0,\n        file: \"\"\n    })\n\n    const { bg_light, container, my_5, p_5, row_center, p_30 } = styles\n    const { darkGrey, primary } = colors\n\n    useEffect(() => {\n        dispatch(fetchModeOfPaymentsAsync())\n    }, [])\n\n    useEffect(() => {\n        if (!invoice) fetchInvoiceDetailsAsync(tenant?.tenantUniqueId!)\n    }, [invoice])\n\n    // Image Picker\n    const [image, setImage] = useState(null);\n\n    const pickImage = async () => {\n        let result = await ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.All,\n            allowsEditing: true,\n            aspect: [4, 3],\n            quality: 1,\n        });\n\n        setImage(result.uri)\n    };\n\n    const onSubmit = async () => {\n        console.log(\"Hi\")\n        console.log(\"amount\", amount)\n        console.log(\"image\", image)\n        if (!!setModeOfPaymentId && !!amount && !!image) {\n            console.log(\"Hello\")\n            await dispatch(createPaymentAsync({\n                invoiceId: invoice?.id!,\n                modeOfPaymentId,\n                amount,\n                file: imageData!\n            }));\n            await dispatch(fetchInvoicesAsync(tenant?.tenantUniqueId!))\n        }\n    }\n    if (isFetchingInvoiceDetails || !invoice) return <LoadingScreen />\n    const { invoiceNumber } = invoice\n\n    return (\n        <View style={container}>\n\n            <View style={[my_5]}>\n                <AppText as=\"h5\" bold color={darkGrey} >Invoice Number</AppText>\n                <AppText bold >{invoiceNumber}</AppText>\n            </View>\n\n            <Formik\n                initialValues={payment}\n                onSubmit={values => {\n                    onSubmit();\n                }}\n            >\n                {\n                    ({ handleChange, handleSubmit, setFieldTouched, errors, touched, values }) => (\n                        <>\n                            <View style={my_5}>\n                                <AppText as=\"h5\" bold color={darkGrey} >Mode of Payment</AppText>\n                                <View style={[bg_light, my_5, p_5]} >\n                                    <RNPickerSelect\n                                        onValueChange={(value) => setModeOfPaymentId(value)}\n                                        items={modeOfPayments.map(i => {\n                                            return { label: i.bankName, value: i.id }\n                                        })\n                                        }\n                                        value={values.modeOfPaymentId}\n                                    />\n                                </View>\n                            </View>\n\n                            <FormTextInput\n                                icon={<MaterialIcons name=\"money\" size={20} color={primary} />}\n                                onBlur={() => setFieldTouched('amount')}\n                                onChangeText={(value: any) => setAmount(value)}\n                                label='Amount'\n                                placeholder='Amount'\n                                errorMessage={touched && errors.amount}\n                                value={amount}\n                            />\n\n                            <View style={my_5}>\n                                <AppText as=\"h5\" bold color={darkGrey} >Mode of Payment</AppText>\n                                <View style={bg_light}>\n                                    <TouchableOpacity onPress={pickImage}>\n                                        <View style={[row_center, p_30]}>\n                                            <FontAwesome name=\"camera\" size={50} color={darkGrey} />\n                                        </View>\n                                    </TouchableOpacity>\n                                    {image && <Image source={{ uri: image }} style={{ width: 200, height: 200 }} />}\n                                </View>\n                            </View>\n\n                            <AppButton onPress={handleSubmit} title='Submit' />\n\n                        </>\n                    )\n                }\n            </Formik>\n\n\n        </View>\n    );\n}\n\nexport default PaymentFormScreen;"]},"metadata":{},"sourceType":"module"}