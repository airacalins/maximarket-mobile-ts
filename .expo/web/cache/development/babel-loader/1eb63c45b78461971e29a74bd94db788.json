{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ToastAndroid from \"react-native-web/dist/exports/ToastAndroid\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useDispatch } from 'react-redux';\nimport { useAppSelecter } from \"../../store/configureStore\";\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as Yup from 'yup';\nimport { styles } from \"../../styles/styles\";\nimport colors from \"../../styles/colors\";\nimport AppButton from \"../../components/button/AppButton\";\nimport AppText from \"../../components/text/AppText\";\nimport FormTextInput from \"../../components/input/FormTextInput\";\nimport { Formik } from 'formik';\nimport { fetchTenantDetailsAsync } from \"../../reducers/tenantSlice\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar LoginFormScreen = function LoginFormScreen(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant,\n      isFetchingTenantDetails = _useAppSelecter.isFetchingTenantDetails,\n      errorMessage = _useAppSelecter.errorMessage;\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (!!errorMessage) {\n      ToastAndroid.show(errorMessage, ToastAndroid.SHORT);\n    }\n\n    ;\n  }, [errorMessage]);\n  useEffect(function () {\n    if (!!tenant) navigation.navigate(\"HomeNavigator\");\n  }, [tenant]);\n  var validationSchema = Yup.object({\n    accountNumber: Yup.string().required(\"Account Number is required.\")\n  });\n\n  var _onSubmit = function onSubmit(values) {\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(dispatch(fetchTenantDetailsAsync(values.accountNumber)));\n\n          case 2:\n            Keyboard.dismiss();\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var bg_darken = styles.bg_darken,\n      centered = styles.centered,\n      flex_1 = styles.flex_1,\n      p_15 = styles.p_15,\n      row_center = styles.row_center,\n      w_100p = styles.w_100p;\n  if (isFetchingTenantDetails) return _jsx(LoadingScreen, {});\n  return _jsx(ImageBackground, {\n    resizeMode: \"cover\",\n    source: require(\"../../../assets/images/login-bg.jpg\"),\n    style: {\n      height: '100%',\n      width: '100%'\n    },\n    children: _jsxs(View, {\n      style: [flex_1, bg_darken],\n      children: [_jsx(View, {\n        style: [flex_1, row_center],\n        children: _jsx(AppText, {\n          as: \"title\",\n          color: colors.light,\n          children: \"Maximarket\"\n        })\n      }), _jsx(View, {\n        style: [centered, flex_1, p_15, w_100p],\n        children: _jsx(Formik, {\n          initialValues: {\n            accountNumber: ''\n          },\n          onSubmit: function onSubmit(values) {\n            return _onSubmit(values);\n          },\n          validationSchema: validationSchema,\n          children: function children(_ref2) {\n            var handleChange = _ref2.handleChange,\n                handleSubmit = _ref2.handleSubmit,\n                setFieldTouched = _ref2.setFieldTouched,\n                errors = _ref2.errors,\n                touched = _ref2.touched;\n            return _jsxs(_Fragment, {\n              children: [_jsx(FormTextInput, {\n                icon: _jsx(MaterialCommunityIcons, {\n                  name: \"clipboard-account\",\n                  size: 18,\n                  color: colors.primary\n                }),\n                onBlur: function onBlur() {\n                  return setFieldTouched('accountNumber');\n                },\n                onChangeText: handleChange('accountNumber'),\n                placeholder: \"Enter Account Number\",\n                errorMessage: touched && errors.accountNumber\n              }), _jsx(AppButton, {\n                onPress: handleSubmit,\n                title: \"Submit\"\n              })]\n            });\n          }\n        })\n      })]\n    })\n  });\n};\n\n{}\nexport default LoginFormScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/account/LoginFormScreen.tsx"],"names":["React","useEffect","useDispatch","useAppSelecter","MaterialCommunityIcons","Yup","styles","colors","AppButton","AppText","FormTextInput","Formik","fetchTenantDetailsAsync","LoadingScreen","LoginFormScreen","navigation","state","tenant","isFetchingTenantDetails","errorMessage","dispatch","ToastAndroid","show","SHORT","navigate","validationSchema","object","accountNumber","string","required","onSubmit","values","Keyboard","dismiss","bg_darken","centered","flex_1","p_15","row_center","w_100p","require","height","width","light","handleChange","handleSubmit","setFieldTouched","errors","touched","primary"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { ImageBackground, Keyboard, ToastAndroid, View } from 'react-native';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelecter } from '../../store/configureStore';\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\nimport * as Yup from 'yup';\n\n\nimport { styles } from '../../styles/styles';\nimport colors from '../../styles/colors';\nimport AppButton from '../../components/button/AppButton';\nimport AppText from '../../components/text/AppText';\nimport FormTextInput from '../../components/input/FormTextInput';\nimport routes from '../../navigations/routes';\nimport { Formik } from 'formik';\nimport { fetchTenantDetailsAsync } from '../../reducers/tenantSlice';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\n\ninterface Props {\n    navigation: any\n}\n\nconst LoginFormScreen: React.FC<Props> = ({ navigation }) => {\n\n    const { tenant, isFetchingTenantDetails, errorMessage } = useAppSelecter((state) => state.tenant)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (!!errorMessage) {\n            ToastAndroid.show(errorMessage, ToastAndroid.SHORT);\n        };\n    }, [errorMessage])\n\n    useEffect(() => {\n        if (!!tenant) navigation.navigate(\"HomeNavigator\")\n    }, [tenant])\n\n    const validationSchema = Yup.object({\n        accountNumber: Yup.string().required(\"Account Number is required.\")\n    })\n\n    const onSubmit = async (values: any) => {\n        await dispatch(fetchTenantDetailsAsync(values.accountNumber));\n        Keyboard.dismiss()\n    }\n\n    const { bg_darken, centered, flex_1, p_15, row_center, w_100p } = styles\n\n    if (isFetchingTenantDetails) return <LoadingScreen />\n\n    return (\n        <ImageBackground resizeMode=\"cover\" source={require('../../../assets/images/login-bg.jpg')} style={{ height: '100%', width: '100%' }}>\n            <View style={[flex_1, bg_darken]}>\n\n                <View style={[flex_1, row_center]}>\n                    <AppText as=\"title\" color={colors.light}>Maximarket</AppText>\n                </View>\n\n                <View style={[centered, flex_1, p_15, w_100p]}>\n                    <Formik\n                        initialValues={{ accountNumber: '' }}\n                        onSubmit={values => onSubmit(values)}\n                        validationSchema={validationSchema}\n                    >\n                        {\n                            ({ handleChange, handleSubmit, setFieldTouched, errors, touched }) => (\n                                <>\n                                    <FormTextInput\n                                        icon={<MaterialCommunityIcons name=\"clipboard-account\" size={18} color={colors.primary} />}\n                                        onBlur={() => setFieldTouched('accountNumber')}\n                                        onChangeText={handleChange('accountNumber')}\n                                        placeholder='Enter Account Number'\n                                        errorMessage={touched && errors.accountNumber}\n                                    />\n                                    <AppButton onPress={handleSubmit} title='Submit' />\n                                </>\n                            )\n                        }\n                    </Formik>\n\n\n\n                </View>\n            </View>\n        </ImageBackground >\n\n    );\n}\n\n{/* <FormTextInput\n    icon={<MaterialCommunityIcons name=\"clipboard-account\" size={18} color={colors.primary} />}\n    placeholder='Enter Account Number'\n/>\n<AppButton onPress={() => console.log(\"Pressed\")} title='Submit' /> */}\n\nexport default LoginFormScreen;"]},"metadata":{},"sourceType":"module"}