{"ast":null,"code":"import React, { useEffect, useMemo } from 'react';\nimport routes from \"../../navigations/routes\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { FontAwesome } from '@expo/vector-icons';\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport { dateFormatter } from \"../../utils/dateFormatter\";\nimport AppButton from \"../../components/button/AppButton\";\nimport AppText from \"../../components/text/AppText\";\nimport InvoiceBadge from \"../../components/badge/InvoiceBadge\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport { fetchInvoiceDetailsAsync, setSelectedPayment } from \"../../reducers/invoiceSlice\";\nimport NoData from \"../../components/indicator/NoData\";\nimport { currencyFormatter } from \"../../utils/currencyFormatter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar InvoiceDetailsScreen = function InvoiceDetailsScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useAppDispatch();\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var _useAppSelecter2 = useAppSelecter(function (state) {\n    return state.invoice;\n  }),\n      invoice = _useAppSelecter2.invoice,\n      isFetchingInvoiceDetails = _useAppSelecter2.isFetchingInvoiceDetails;\n\n  var bg_light = styles.bg_light,\n      bg_primary = styles.bg_primary,\n      container = styles.container,\n      m_15 = styles.m_15,\n      mt_15 = styles.mt_15,\n      mx_15 = styles.mx_15,\n      my_15 = styles.my_15,\n      me_5 = styles.me_5,\n      my_5 = styles.my_5,\n      p_5 = styles.p_5,\n      p_15 = styles.p_15,\n      rounded = styles.rounded,\n      row_center_x_between = styles.row_center_x_between,\n      row_center_x = styles.row_center_x,\n      row = styles.row,\n      w_30 = styles.w_30,\n      w_50p = styles.w_50p;\n  var darkGrey = colors.darkGrey,\n      green = colors.green,\n      light = colors.light,\n      red = colors.red,\n      secondary = colors.secondary,\n      yellow = colors.yellow;\n  useEffect(function () {\n    if (!invoice) fetchInvoiceDetailsAsync(tenant == null ? void 0 : tenant.tenantUniqueId);\n  }, [invoice]);\n\n  var handleRefreshPaymentHistories = function handleRefreshPaymentHistories() {\n    dispatch(fetchInvoiceDetailsAsync(tenant == null ? void 0 : tenant.tenantUniqueId));\n  };\n\n  var totalAmountPaid = useMemo(function () {\n    return !!invoice && !!invoice.payments ? invoice.payments.filter(function (i) {\n      return i.status == 2;\n    }).reduce(function (previousValue, currentValue) {\n      return previousValue + currentValue.amount;\n    }, 0) : 0;\n  }, [invoice]);\n\n  var renderIcon = function renderIcon(status) {\n    if (status == 2) {\n      return _jsx(FontAwesome, {\n        name: \"check-circle\",\n        size: 30,\n        color: green\n      });\n    }\n\n    if (status == 3) {\n      return _jsx(FontAwesome, {\n        name: \"times-circle\",\n        size: 30,\n        color: red\n      });\n    }\n\n    return _jsx(FontAwesome, {\n      name: \"exclamation-circle\",\n      size: 30,\n      color: yellow\n    });\n  };\n\n  if (isFetchingInvoiceDetails || !invoice) return _jsx(LoadingScreen, {});\n  var amount = invoice.amount,\n      dateCreated = invoice.dateCreated,\n      dueDate = invoice.dueDate,\n      invoiceItems = invoice.invoiceItems,\n      invoiceNumber = invoice.invoiceNumber,\n      invoiceStatus = invoice.invoiceStatus,\n      payments = invoice.payments;\n  var balance = amount - totalAmountPaid;\n  return _jsx(_Fragment, {\n    children: _jsx(FlatList, {\n      ListHeaderComponent: _jsxs(_Fragment, {\n        children: [_jsxs(View, {\n          style: [bg_light, container, p_15, rounded],\n          children: [_jsxs(View, {\n            style: row_center_x_between,\n            children: [_jsxs(AppText, {\n              as: \"h3\",\n              bold: true,\n              children: [\"INV-\" + invoiceNumber, \" \"]\n            }), _jsx(InvoiceBadge, {\n              status: invoiceStatus\n            })]\n          }), _jsxs(AppText, {\n            as: \"h2\",\n            bold: true,\n            children: [currencyFormatter(amount), \" \"]\n          }), _jsxs(View, {\n            style: [my_15, row],\n            children: [_jsxs(View, {\n              style: w_50p,\n              children: [_jsx(AppText, {\n                as: \"h5\",\n                bold: true,\n                color: darkGrey,\n                children: \"Date\"\n              }), _jsx(AppText, {\n                as: \"h4\",\n                bold: true,\n                children: dateFormatter(dateCreated)\n              })]\n            }), _jsxs(View, {\n              style: w_50p,\n              children: [_jsx(AppText, {\n                as: \"h5\",\n                bold: true,\n                color: darkGrey,\n                children: \"Due Date\"\n              }), _jsx(AppText, {\n                as: \"h4\",\n                bold: true,\n                children: dateFormatter(dueDate)\n              })]\n            })]\n          }), _jsxs(View, {\n            style: [bg_primary, p_5, row_center_x_between],\n            children: [_jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              color: light,\n              children: \"Description\"\n            }), _jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              color: light,\n              children: \"Amount\"\n            })]\n          }), _jsx(FlatList, {\n            data: invoiceItems,\n            keyExtractor: function keyExtractor(i) {\n              return i.id;\n            },\n            renderItem: function renderItem(_ref2) {\n              var item = _ref2.item;\n              return _jsxs(View, {\n                style: [p_5, row_center_x_between],\n                children: [_jsx(AppText, {\n                  as: \"h5\",\n                  children: item.description\n                }), _jsx(AppText, {\n                  as: \"h5\",\n                  children: currencyFormatter(item.amount)\n                })]\n              });\n            }\n          }), _jsxs(View, {\n            style: [p_5, row_center_x_between],\n            children: [_jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              children: \"Total\"\n            }), _jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              children: currencyFormatter(amount)\n            })]\n          })]\n        }), _jsx(View, {\n          style: mx_15,\n          children: balance >= 1 && _jsx(AppButton, {\n            onPress: function onPress() {\n              return navigation.navigate(\"PaymentFormNavigator\");\n            },\n            title: \"Add Payment\"\n          })\n        }), _jsxs(View, {\n          style: [mt_15, mx_15],\n          children: [_jsx(AppText, {\n            as: \"h5\",\n            bold: true,\n            children: \"Payment Histories\"\n          }), _jsxs(View, {\n            style: row,\n            children: [_jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              children: \"Current Balance: \"\n            }), _jsx(AppText, {\n              as: \"h5\",\n              bold: true,\n              children: currencyFormatter(balance)\n            })]\n          })]\n        }), !payments && _jsx(NoData, {})]\n      }),\n      data: payments,\n      keyExtractor: function keyExtractor(p) {\n        return p.id;\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            dispatch(setSelectedPayment(item));\n            navigation.navigate(routes.PAYMENT_DETAILS);\n          },\n          children: _jsxs(View, {\n            style: [bg_light, container, my_5, p_15, row_center_x_between],\n            children: [_jsxs(View, {\n              style: [row, row_center_x],\n              children: [_jsx(View, {\n                style: [me_5, w_30],\n                children: _jsx(_Fragment, {\n                  children: renderIcon(item.status)\n                })\n              }), _jsx(AppText, {\n                bold: true,\n                children: dateFormatter(item.dateCreated)\n              })]\n            }), _jsx(AppText, {\n              as: \"h3\",\n              bold: true,\n              color: secondary,\n              children: currencyFormatter(item.amount)\n            })]\n          })\n        });\n      },\n      refreshing: isFetchingInvoiceDetails,\n      onRefresh: handleRefreshPaymentHistories\n    })\n  });\n};\n\nexport default InvoiceDetailsScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/invoice/InvoiceDetailsScreen.tsx"],"names":["React","useEffect","useMemo","routes","FontAwesome","useAppDispatch","useAppSelecter","colors","styles","dateFormatter","AppButton","AppText","InvoiceBadge","LoadingScreen","fetchInvoiceDetailsAsync","setSelectedPayment","NoData","currencyFormatter","InvoiceDetailsScreen","navigation","dispatch","state","tenant","invoice","isFetchingInvoiceDetails","bg_light","bg_primary","container","m_15","mt_15","mx_15","my_15","me_5","my_5","p_5","p_15","rounded","row_center_x_between","row_center_x","row","w_30","w_50p","darkGrey","green","light","red","secondary","yellow","tenantUniqueId","handleRefreshPaymentHistories","totalAmountPaid","payments","filter","i","status","reduce","previousValue","currentValue","amount","renderIcon","dateCreated","dueDate","invoiceItems","invoiceNumber","invoiceStatus","balance","id","item","description","navigate","p","PAYMENT_DETAILS"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport routes from '../../navigations/routes';\nimport { FlatList, ScrollView, TouchableOpacity, View } from 'react-native';\nimport { FontAwesome } from '@expo/vector-icons';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport { dateFormatter } from '../../utils/dateFormatter';\nimport AppButton from '../../components/button/AppButton';\nimport AppText from '../../components/text/AppText';\nimport InvoiceBadge from '../../components/badge/InvoiceBadge';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport { fetchInvoiceDetailsAsync, setSelectedPayment } from '../../reducers/invoiceSlice';\nimport NoData from '../../components/indicator/NoData';\nimport { currencyFormatter } from '../../utils/currencyFormatter';\n\ninterface Props {\n    navigation: any\n}\n\nconst InvoiceDetailsScreen: React.FC<Props> = ({ navigation }) => {\n    const dispatch = useAppDispatch();\n    const { tenant } = useAppSelecter((state) => state.tenant)\n    const { invoice, isFetchingInvoiceDetails } = useAppSelecter((state) => state.invoice)\n\n    const { bg_light, bg_primary, container, m_15, mt_15, mx_15, my_15, me_5, my_5, p_5, p_15, rounded, row_center_x_between, row_center_x, row, w_30, w_50p } = styles;\n    const { darkGrey, green, light, red, secondary, yellow } = colors;\n\n    useEffect(() => {\n        if (!invoice) fetchInvoiceDetailsAsync(tenant?.tenantUniqueId!)\n    }, [invoice])\n\n    const handleRefreshPaymentHistories = () => {\n        dispatch(fetchInvoiceDetailsAsync(tenant?.tenantUniqueId!))\n    }\n\n    const totalAmountPaid = useMemo(\n        () => !!invoice && !!invoice.payments ?\n            invoice.payments.filter(i => i.status == 2).reduce((previousValue, currentValue) =>\n                previousValue + currentValue.amount, 0) : 0,\n        [invoice]\n    );\n\n    const renderIcon = (status: number) => {\n        if (status == 2) { return <FontAwesome name=\"check-circle\" size={30} color={green} /> }\n        if (status == 3) { return <FontAwesome name=\"times-circle\" size={30} color={red} /> }\n        return <FontAwesome name=\"exclamation-circle\" size={30} color={yellow} />\n    }\n\n    if (isFetchingInvoiceDetails || !invoice) return <LoadingScreen />\n\n    const { amount, dateCreated, dueDate, invoiceItems, invoiceNumber, invoiceStatus, payments } = invoice;\n\n    const balance = amount - totalAmountPaid\n\n    return (\n        <>\n            <FlatList\n                ListHeaderComponent={\n                    <>\n                        <View style={[bg_light, container, p_15, rounded]}>\n\n                            <View style={row_center_x_between}>\n                                <AppText as=\"h3\" bold>{`INV-${invoiceNumber}`} </AppText>\n                                <InvoiceBadge status={invoiceStatus} />\n                            </View>\n                            <AppText as=\"h2\" bold>{currencyFormatter(amount)} </AppText>\n\n                            <View style={[my_15, row]}>\n                                <View style={w_50p}>\n                                    <AppText as=\"h5\" bold color={darkGrey}>Date</AppText>\n                                    <AppText as=\"h4\" bold>{dateFormatter(dateCreated)}</AppText>\n                                </View>\n\n                                <View style={w_50p}>\n                                    <AppText as=\"h5\" bold color={darkGrey}>Due Date</AppText>\n                                    <AppText as=\"h4\" bold>{dateFormatter(dueDate)}</AppText>\n                                </View>\n                            </View>\n\n                            <View style={[bg_primary, p_5, row_center_x_between]}>\n                                <AppText as=\"h5\" bold color={light}>Description</AppText>\n                                <AppText as=\"h5\" bold color={light}>Amount</AppText>\n                            </View>\n\n                            <FlatList\n                                data={invoiceItems}\n                                keyExtractor={(i) => i.id}\n                                renderItem={({ item }) =>\n                                    <View style={[p_5, row_center_x_between]}>\n                                        <AppText as=\"h5\">{item.description}</AppText>\n                                        <AppText as=\"h5\">{currencyFormatter(item.amount)}</AppText>\n                                    </View>\n                                }\n                            />\n\n                            <View style={[p_5, row_center_x_between]}>\n                                <AppText as=\"h5\" bold>Total</AppText>\n                                <AppText as=\"h5\" bold>{currencyFormatter(amount)}</AppText>\n                            </View>\n                        </View>\n\n                        <View style={mx_15}>\n                            {\n                                balance >= 1 && <AppButton onPress={() => navigation.navigate(\"PaymentFormNavigator\")} title='Add Payment' />\n                            }\n\n                        </View>\n\n                        <View style={[mt_15, mx_15]}>\n                            <AppText as=\"h5\" bold>Payment Histories</AppText>\n                            <View style={row}>\n                                <AppText as=\"h5\" bold>Current Balance: </AppText>\n                                <AppText as=\"h5\" bold>{currencyFormatter(balance)}</AppText>\n                            </View>\n                        </View>\n\n                        {!payments && <NoData />}\n                    </>\n                }\n                data={payments}\n                keyExtractor={(p => p.id)}\n                renderItem={({ item }) => (\n                    <TouchableOpacity onPress={() => {\n                        dispatch(setSelectedPayment(item))\n                        navigation.navigate(routes.PAYMENT_DETAILS)\n                    }}>\n                        <View style={[bg_light, container, my_5, p_15, row_center_x_between]}>\n                            <View style={[row, row_center_x]}>\n                                <View style={[me_5, w_30]}>\n                                    <>{renderIcon(item.status)}</>\n                                </View>\n                                <AppText bold>{dateFormatter(item.dateCreated)}</AppText>\n                            </View>\n                            <AppText as=\"h3\" bold color={secondary}>{currencyFormatter(item.amount)}</AppText>\n                        </View>\n                    </TouchableOpacity>\n                )}\n                refreshing={isFetchingInvoiceDetails}\n                onRefresh={handleRefreshPaymentHistories}\n            />\n        </>\n    );\n}\n\nexport default InvoiceDetailsScreen;"]},"metadata":{},"sourceType":"module"}