{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport * as reactNative from \"react-native-web/dist/index\";\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport { dateFormatter } from \"../../utils/dateFormatter\";\nimport { getTenantContractPhoto } from \"../../reducers/tenantSlice\";\nimport AppText from \"../../components/text/AppText\";\nimport Detail from \"../../components/item/Detail\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport { currencyFormatter } from \"../../utils/currencyFormatter\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar StoreDetails = function StoreDetails(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant,\n      contractPhotos = _useAppSelecter.contractPhotos,\n      isFetchingTenantDetails = _useAppSelecter.isFetchingTenantDetails,\n      isFetchingPhotos = _useAppSelecter.isFetchingPhotos;\n\n  var dispatch = useAppDispatch();\n  var _ref2 = tenant,\n      tenantUniqueId = _ref2.tenantUniqueId;\n\n  var _ref3 = tenant == null ? void 0 : tenant.contract,\n      slotNumber = _ref3.slotNumber,\n      size = _ref3.size,\n      price = _ref3.price,\n      startDate = _ref3.startDate,\n      endDate = _ref3.endDate;\n\n  useEffect(function () {\n    var _tenant$contract;\n\n    if (!!tenant) dispatch(getTenantContractPhoto(tenant == null ? void 0 : (_tenant$contract = tenant.contract) == null ? void 0 : _tenant$contract.id));\n  }, []);\n  var bg_light = styles.bg_light,\n      container = styles.container,\n      my_5 = styles.my_5,\n      p_15 = styles.p_15,\n      rounded = styles.rounded;\n  var darkGrey = colors.darkGrey;\n  if (isFetchingTenantDetails && isFetchingPhotos) return _jsx(LoadingScreen, {});\n  return _jsx(reactNative.View, {\n    style: [bg_light, container, p_15, rounded],\n    children: _jsx(reactNative.FlatList, {\n      ListHeaderComponent: _jsxs(_Fragment, {\n        children: [_jsx(Detail, {\n          title: \"Account Number\",\n          value: tenantUniqueId\n        }), _jsx(Detail, {\n          title: \"Slot Number\",\n          value: slotNumber\n        }), _jsx(Detail, {\n          title: \"Size\",\n          value: size + \" sqm.\"\n        }), _jsx(Detail, {\n          title: \"Rental Fee\",\n          value: currencyFormatter(price)\n        }), _jsx(Detail, {\n          title: \"Contract Start Date\",\n          value: dateFormatter(startDate)\n        }), _jsx(Detail, {\n          title: \"Contract End Date\",\n          value: dateFormatter(endDate)\n        }), _jsx(AppText, {\n          as: \"h5\",\n          bold: true,\n          color: darkGrey,\n          children: \"Contact Photos\"\n        })]\n      }),\n      showsVerticalScrollIndicator: false,\n      data: contractPhotos,\n      keyExtractor: function keyExtractor(c) {\n        return c.id;\n      },\n      renderItem: function renderItem(_ref4) {\n        var item = _ref4.item;\n        return _jsx(_Fragment, {\n          children: _jsx(reactNative.Image, {\n            source: {\n              uri: item.url\n            },\n            resizeMode: \"contain\",\n            style: {\n              aspectRatio: 1,\n              width: '100%',\n              height: undefined,\n              borderColor: darkGrey,\n              borderRadius: 10\n            }\n          })\n        });\n      }\n    })\n  });\n};\n\nexport default StoreDetails;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/store/StoreDetails.tsx"],"names":["React","useEffect","useAppDispatch","useAppSelecter","reactNative","colors","styles","dateFormatter","getTenantContractPhoto","AppText","Detail","LoadingScreen","currencyFormatter","StoreDetails","state","tenant","contractPhotos","isFetchingTenantDetails","isFetchingPhotos","dispatch","tenantUniqueId","contract","slotNumber","size","price","startDate","endDate","id","bg_light","container","my_5","p_15","rounded","darkGrey","c","item","uri","url","aspectRatio","width","height","undefined","borderColor","borderRadius"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport * as reactNative from 'react-native';\n\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport { dateFormatter } from '../../utils/dateFormatter';\nimport { getTenantContractPhoto } from '../../reducers/tenantSlice';\nimport AppText from '../../components/text/AppText';\nimport Detail from '../../components/item/Detail';\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\nimport { currencyFormatter } from '../../utils/currencyFormatter';\n\nconst StoreDetails = ({ }) => {\n    const { tenant, contractPhotos, isFetchingTenantDetails, isFetchingPhotos } = useAppSelecter((state) => state.tenant)\n\n    const dispatch = useAppDispatch()\n\n    const { tenantUniqueId } = tenant!;\n    const { slotNumber, size, price, startDate, endDate, } = tenant?.contract!;\n\n    useEffect(() => {\n        if (!!tenant) dispatch(getTenantContractPhoto(tenant?.contract?.id!))\n    }, [])\n\n    const { bg_light, container, my_5, p_15, rounded } = styles;\n    const { darkGrey } = colors\n\n    if (isFetchingTenantDetails && isFetchingPhotos) return <LoadingScreen />\n\n    return (\n        <reactNative.View style={[bg_light, container, p_15, rounded]}>\n            <reactNative.FlatList\n                ListHeaderComponent={\n                    <>\n                        <Detail title=\"Account Number\" value={tenantUniqueId} />\n                        <Detail title=\"Slot Number\" value={slotNumber} />\n                        <Detail title=\"Size\" value={`${size} sqm.`} />\n                        <Detail title=\"Rental Fee\" value={currencyFormatter(price)} />\n                        <Detail title=\"Contract Start Date\" value={dateFormatter(startDate)} />\n                        <Detail title=\"Contract End Date\" value={dateFormatter(endDate)} />\n                        <AppText as=\"h5\" bold color={darkGrey}>Contact Photos</AppText>\n                    </>\n                }\n                showsVerticalScrollIndicator={false}\n                data={contractPhotos}\n                keyExtractor={(c => c.id)}\n                renderItem={({ item }) =>\n                    <>\n                        <reactNative.Image\n                            source={{ uri: item.url }}\n                            resizeMode='contain'\n                            style={{ aspectRatio: 1, width: '100%', height: undefined, borderColor: darkGrey, borderRadius: 10, }}\n                        />\n                    </>\n                }\n            />\n        </reactNative.View>\n    );\n}\n\nexport default StoreDetails;"]},"metadata":{},"sourceType":"module"}