{"ast":null,"code":"import _objectDestructuringEmpty from \"@babel/runtime/helpers/objectDestructuringEmpty\";\nimport React, { useEffect } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport { styles } from \"../../styles/styles\";\nimport { dateFormatter } from \"../../utils/dateFormatter\";\nimport Detail from \"../../components/item/Detail\";\nimport LoadingScreen from \"../../components/indicator/LoadingScreen\";\nimport { getTenantContractPhoto } from \"../../reducers/tenantSlice\";\nimport AppText from \"../../components/text/AppText\";\nimport colors from \"../../styles/colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar StoreDetails = function StoreDetails(_ref) {\n  _objectDestructuringEmpty(_ref);\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant,\n      contractPhotos = _useAppSelecter.contractPhotos,\n      isFetchingTenantDetails = _useAppSelecter.isFetchingTenantDetails,\n      isFetchingPhotos = _useAppSelecter.isFetchingPhotos;\n\n  var dispatch = useAppDispatch();\n  var _ref2 = tenant,\n      tenantUniqueId = _ref2.tenantUniqueId;\n\n  var _ref3 = tenant == null ? void 0 : tenant.contract,\n      slotNumber = _ref3.slotNumber,\n      size = _ref3.size,\n      price = _ref3.price,\n      startDate = _ref3.startDate,\n      endDate = _ref3.endDate;\n\n  useEffect(function () {\n    var _tenant$contract;\n\n    if (!!tenant) dispatch(getTenantContractPhoto(tenant == null ? void 0 : (_tenant$contract = tenant.contract) == null ? void 0 : _tenant$contract.id));\n  }, []);\n  var bg_light = styles.bg_light,\n      container = styles.container,\n      my_5 = styles.my_5,\n      p_15 = styles.p_15,\n      rounded = styles.rounded;\n  var darkGrey = colors.darkGrey;\n  if (isFetchingTenantDetails || isFetchingPhotos) return _jsx(LoadingScreen, {});\n  return _jsx(View, {\n    style: [bg_light, container, p_15, rounded],\n    children: _jsxs(ScrollView, {\n      showsVerticalScrollIndicator: false,\n      children: [_jsx(Detail, {\n        title: \"Account Number\",\n        value: tenantUniqueId\n      }), _jsx(Detail, {\n        title: \"Slot Number\",\n        value: slotNumber\n      }), _jsx(Detail, {\n        title: \"Size\",\n        value: size + \" sqm.\"\n      }), _jsx(Detail, {\n        title: \"Rental Fee\",\n        value: price\n      }), _jsx(Detail, {\n        title: \"Contract Start Date\",\n        value: dateFormatter(startDate)\n      }), _jsx(Detail, {\n        title: \"Contract End Date\",\n        value: dateFormatter(endDate)\n      }), _jsxs(View, {\n        style: my_5,\n        children: [_jsx(AppText, {\n          as: \"h5\",\n          bold: true,\n          color: darkGrey,\n          children: \"Contact Photos\"\n        }), _jsx(FlatList, {\n          data: contractPhotos,\n          keyExtractor: function keyExtractor(c) {\n            return c.id;\n          },\n          renderItem: function renderItem(_ref4) {\n            var item = _ref4.item;\n            return _jsx(_Fragment, {\n              children: _jsx(Image, {\n                source: {\n                  uri: item.url\n                },\n                resizeMode: \"contain\",\n                style: {\n                  aspectRatio: 1,\n                  width: '100%',\n                  height: undefined,\n                  borderColor: darkGrey,\n                  borderRadius: 10\n                }\n              })\n            });\n          }\n        })]\n      })]\n    })\n  });\n};\n\nexport default StoreDetails;","map":{"version":3,"sources":["C:/Users/Alex/Documents/GitHub/maximarket-mobile-ts/src/screens/store/StoreDetails.tsx"],"names":["React","useEffect","useAppDispatch","useAppSelecter","styles","dateFormatter","Detail","LoadingScreen","getTenantContractPhoto","AppText","colors","StoreDetails","state","tenant","contractPhotos","isFetchingTenantDetails","isFetchingPhotos","dispatch","tenantUniqueId","contract","slotNumber","size","price","startDate","endDate","id","bg_light","container","my_5","p_15","rounded","darkGrey","c","item","uri","url","aspectRatio","width","height","undefined","borderColor","borderRadius"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { FlatList, Image, ScrollView, View } from 'react-native';\r\n\r\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\r\nimport { styles } from '../../styles/styles';\r\nimport { dateFormatter } from '../../utils/dateFormatter';\r\nimport Detail from '../../components/item/Detail';\r\nimport LoadingScreen from '../../components/indicator/LoadingScreen';\r\nimport { getTenantContractPhoto } from '../../reducers/tenantSlice';\r\nimport AppText from '../../components/text/AppText';\r\nimport colors from '../../styles/colors';\r\n\r\nconst StoreDetails = ({ }) => {\r\n    const { tenant, contractPhotos, isFetchingTenantDetails, isFetchingPhotos } = useAppSelecter((state) => state.tenant)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const { tenantUniqueId } = tenant!;\r\n    const { slotNumber, size, price, startDate, endDate, } = tenant?.contract!;\r\n\r\n    useEffect(() => {\r\n        if (!!tenant) dispatch(getTenantContractPhoto(tenant?.contract?.id!))\r\n    }, [])\r\n\r\n    const { bg_light, container, my_5, p_15, rounded } = styles;\r\n    const { darkGrey } = colors\r\n\r\n    if (isFetchingTenantDetails || isFetchingPhotos) return <LoadingScreen />\r\n\r\n    return (\r\n        <View style={[bg_light, container, p_15, rounded]}>\r\n            <ScrollView showsVerticalScrollIndicator={false}>\r\n                <Detail title=\"Account Number\" value={tenantUniqueId} />\r\n                <Detail title=\"Slot Number\" value={slotNumber} />\r\n                <Detail title=\"Size\" value={`${size} sqm.`} />\r\n                <Detail title=\"Rental Fee\" value={price} />\r\n                <Detail title=\"Contract Start Date\" value={dateFormatter(startDate)} />\r\n                <Detail title=\"Contract End Date\" value={dateFormatter(endDate)} />\r\n                <View style={my_5}>\r\n                    <AppText as=\"h5\" bold color={darkGrey}>Contact Photos</AppText>\r\n                    <FlatList\r\n                        data={contractPhotos}\r\n                        keyExtractor={(c => c.id)}\r\n                        renderItem={({ item }) =>\r\n                            <>\r\n                                <Image\r\n                                    source={{ uri: item.url }}\r\n                                    resizeMode='contain'\r\n                                    style={{ aspectRatio: 1, width: '100%', height: undefined, borderColor: darkGrey, borderRadius: 10, }}\r\n                                />\r\n                            </>\r\n                        }\r\n                    />\r\n                </View>\r\n            </ScrollView>\r\n        </View>\r\n\r\n    );\r\n}\r\n\r\nexport default StoreDetails;\r\n\r\n// {\r\n//     !!contractPhotos ?\r\n//       contractPhotos.map(i =>\r\n//         <>\r\n//           <Image\r\n//             source={{ uri: i.url }}\r\n//             resizeMode='contain'\r\n//             style={{\r\n//               aspectRatio: 1,\r\n//               width: '100%',\r\n//               height: undefined,\r\n//               borderColor: colors.grey,\r\n//               borderRadius: 10,\r\n//               borderWidth: 1,\r\n//             }}\r\n//           />\r\n//           <TextStyle as=\"h5\" italic>Uploaded on {moment(i.dateCreated).format(\"MMM DD, YYYY\")}</TextStyle>\r\n//         </>\r\n//       )\r\n//       :\r\n//       <Segment alignItems=\"center\" borderWidth={1} borderColor={colors.grey}>\r\n//         <TextStyle italic bold color={colors.red}>\r\n//           No contract photo yet.\r\n//         </TextStyle>\r\n//       </Segment>\r\n\r\n//   }"]},"metadata":{},"sourceType":"module"}