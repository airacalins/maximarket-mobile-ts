{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { AntDesign } from '@expo/vector-icons';\nimport { FontAwesome } from '@expo/vector-icons';\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport AppButton from \"../../components/button/AppButton\";\nimport FormTextInput from \"../../components/input/FormTextInput\";\nimport * as Yup from 'yup';\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport { Formik } from 'formik';\nimport { fetchTenantDetailsAsync, updateTenantDetailsAsync } from \"../../reducers/tenantSlice\";\nimport routes from \"../../navigations/routes\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AccountFormScreen = function AccountFormScreen(_ref) {\n  var navigation = _ref.navigation;\n  var dispatch = useAppDispatch();\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var _useState = useState({\n    id: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    businessName: \"\",\n    contact: \"\",\n    address: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      tenantInput = _useState2[0],\n      setTenantInput = _useState2[1];\n\n  useEffect(function () {\n    if (!!tenant) setTenantInput({\n      id: tenant.id,\n      firstName: tenant.firstName,\n      lastName: tenant.lastName,\n      businessName: tenant.businessName,\n      contact: tenant.phone,\n      address: tenant.address\n    });\n  }, [tenant]);\n  var validationSchema = Yup.object().shape({\n    firstName: Yup.string().required().label('First name is required.'),\n    lastName: Yup.string().required().label('Last name is required.'),\n    businessName: Yup.string().required().label('Business name is required.'),\n    contact: Yup.string().required().label('Phone is required.'),\n    address: Yup.string().required().label('Address is required.')\n  });\n\n  var _onSubmit = function onSubmit(values) {\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            navigation.navigate(routes.MENU);\n            Keyboard.dismiss();\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(dispatch(updateTenantDetailsAsync(values)));\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(dispatch(fetchTenantDetailsAsync(tenant == null ? void 0 : tenant.tenantUniqueId)));\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var container = styles.container;\n  return _jsx(View, {\n    style: [container],\n    children: _jsx(Formik, {\n      enableReinitialize: true,\n      initialValues: tenantInput,\n      onSubmit: function onSubmit(values) {\n        return _onSubmit(values);\n      },\n      validationSchema: validationSchema,\n      children: function children(_ref2) {\n        var handleChange = _ref2.handleChange,\n            handleSubmit = _ref2.handleSubmit,\n            setFieldTouched = _ref2.setFieldTouched,\n            errors = _ref2.errors,\n            touched = _ref2.touched,\n            values = _ref2.values;\n        return _jsxs(_Fragment, {\n          children: [_jsx(FormTextInput, {\n            icon: _jsx(FontAwesome, {\n              name: \"user\",\n              size: 18,\n              color: colors.primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('firstName');\n            },\n            onChangeText: handleChange('firstName'),\n            label: \"First Name\",\n            placeholder: \"First Name\",\n            value: values.firstName,\n            errorMessage: touched && errors.firstName\n          }), _jsx(FormTextInput, {\n            icon: _jsx(FontAwesome, {\n              name: \"user\",\n              size: 18,\n              color: colors.primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('lastName');\n            },\n            onChangeText: handleChange('lastName'),\n            label: \"Last Name\",\n            placeholder: \"Last Name\",\n            value: values.lastName,\n            errorMessage: touched && errors.lastName\n          }), _jsx(FormTextInput, {\n            icon: _jsx(AntDesign, {\n              name: \"idcard\",\n              size: 18,\n              color: colors.primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('businessName');\n            },\n            onChangeText: handleChange('businessName'),\n            label: \"Business Name\",\n            placeholder: \"Business Name\",\n            value: values.businessName,\n            errorMessage: touched && errors.businessName\n          }), _jsx(FormTextInput, {\n            icon: _jsx(FontAwesome, {\n              name: \"phone\",\n              size: 18,\n              color: colors.primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('contact');\n            },\n            onChangeText: handleChange('contact'),\n            label: \"Contact Number\",\n            placeholder: \"Contact Number\",\n            value: values.contact,\n            errorMessage: touched && errors.contact\n          }), _jsx(FormTextInput, {\n            icon: _jsx(FontAwesome, {\n              name: \"home\",\n              size: 18,\n              color: colors.primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('address');\n            },\n            onChangeText: handleChange('address'),\n            label: \"Address\",\n            placeholder: \"Address\",\n            value: values.address,\n            errorMessage: touched && errors.address\n          }), _jsx(AppButton, {\n            onPress: handleSubmit,\n            title: \"Update\"\n          })]\n        });\n      }\n    })\n  });\n};\n\nexport default AccountFormScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/account/AccountFormScreen.tsx"],"names":["React","useEffect","useState","AntDesign","FontAwesome","colors","styles","AppButton","FormTextInput","Yup","useAppDispatch","useAppSelecter","Formik","fetchTenantDetailsAsync","updateTenantDetailsAsync","routes","AccountFormScreen","navigation","dispatch","state","tenant","id","firstName","lastName","businessName","contact","address","tenantInput","setTenantInput","phone","validationSchema","object","shape","string","required","label","onSubmit","values","navigate","MENU","Keyboard","dismiss","tenantUniqueId","container","handleChange","handleSubmit","setFieldTouched","errors","touched","primary"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Keyboard, View } from 'react-native';\nimport { AntDesign } from '@expo/vector-icons';\nimport { FontAwesome } from '@expo/vector-icons';\n\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport AppButton from '../../components/button/AppButton';\nimport FormTextInput from '../../components/input/FormTextInput';\nimport * as Yup from 'yup';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport { Formik } from 'formik';\nimport { fetchTenantDetailsAsync, updateTenantDetailsAsync } from '../../reducers/tenantSlice';\nimport { IUpdateTenantInput } from '../../models/Tenant';\nimport routes from '../../navigations/routes';\n\ninterface Props {\n    navigation: any\n}\n\nconst AccountFormScreen: React.FC<Props> = ({ navigation }) => {\n    const dispatch = useAppDispatch();\n    const { tenant } = useAppSelecter((state) => state.tenant)\n\n    const [tenantInput, setTenantInput] = useState({\n        id: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        businessName: \"\",\n        contact: \"\",\n        address: \"\"\n    });\n\n    useEffect(() => {\n        if (!!tenant) setTenantInput({\n            id: tenant.id,\n            firstName: tenant.firstName,\n            lastName: tenant.lastName,\n            businessName: tenant.businessName,\n            contact: tenant.phone,\n            address: tenant.address\n        })\n    }, [tenant])\n\n    const validationSchema = Yup.object().shape({\n        firstName: Yup.string().required().label('First name is required.'),\n        lastName: Yup.string().required().label('Last name is required.'),\n        businessName: Yup.string().required().label('Business name is required.'),\n        contact: Yup.string().required().label('Phone is required.'),\n        address: Yup.string().required().label('Address is required.'),\n    });\n\n    const onSubmit = async (values: IUpdateTenantInput) => {\n        navigation.navigate(routes.MENU)\n        Keyboard.dismiss()\n        await dispatch(updateTenantDetailsAsync(values));\n        await dispatch(fetchTenantDetailsAsync(tenant?.tenantUniqueId))\n    }\n\n    const { container } = styles\n\n    return (\n        <View style={[container]}>\n\n            <Formik\n                enableReinitialize\n                initialValues={tenantInput}\n                onSubmit={values => onSubmit(values)}\n                validationSchema={validationSchema}\n            >\n                {\n                    ({ handleChange, handleSubmit, setFieldTouched, errors, touched, values }) => (\n                        <>\n                            <FormTextInput\n                                icon={<FontAwesome name=\"user\" size={18} color={colors.primary} />}\n                                onBlur={() => setFieldTouched('firstName')}\n                                onChangeText={handleChange('firstName')}\n                                label='First Name'\n                                placeholder='First Name'\n                                value={values.firstName}\n                                errorMessage={touched && errors.firstName}\n                            />\n\n                            <FormTextInput\n                                icon={<FontAwesome name=\"user\" size={18} color={colors.primary} />}\n                                onBlur={() => setFieldTouched('lastName')}\n                                onChangeText={handleChange('lastName')}\n                                label='Last Name'\n                                placeholder='Last Name'\n                                value={values.lastName}\n                                errorMessage={touched && errors.lastName}\n                            />\n\n                            <FormTextInput\n                                icon={<AntDesign name=\"idcard\" size={18} color={colors.primary} />}\n                                onBlur={() => setFieldTouched('businessName')}\n                                onChangeText={handleChange('businessName')}\n                                label='Business Name'\n                                placeholder='Business Name'\n                                value={values.businessName}\n                                errorMessage={touched && errors.businessName}\n                            />\n\n                            <FormTextInput\n                                icon={<FontAwesome name=\"phone\" size={18} color={colors.primary} />}\n                                onBlur={() => setFieldTouched('contact')}\n                                onChangeText={handleChange('contact')}\n                                label='Contact Number'\n                                placeholder='Contact Number'\n                                value={values.contact}\n                                errorMessage={touched && errors.contact}\n                            />\n\n                            <FormTextInput\n                                icon={<FontAwesome name=\"home\" size={18} color={colors.primary} />}\n                                onBlur={() => setFieldTouched('address')}\n                                onChangeText={handleChange('address')}\n                                label='Address'\n                                placeholder='Address'\n                                value={values.address}\n                                errorMessage={touched && errors.address}\n                            />\n\n                            <AppButton onPress={handleSubmit} title='Update' />\n\n                        </>\n                    )\n\n                }\n\n            </Formik>\n\n            {/* <Detail title=\"Status\" value={\n                isActive ?\n                    <View style={[badge, bg_green]} >\n                        <AppText as=\"h5\" bold color={light} italic>Active</AppText>\n                    </View> :\n\n                    <View style={[badge, bg_red]} >\n                        <AppText as=\"h5\" bold color={light} italic>Deativated</AppText>\n                    </View>\n            } /> */}\n            {/* <FormTextInput icon={<FontAwesome name=\"user\" size={18} color={colors.primary} />} label='First Name' placeholder='First Name' />\n            <FormTextInput icon={<FontAwesome name=\"user\" size={18} color={colors.primary} />} label='Last Name' placeholder='Last Name' />\n            <FormTextInput icon={<AntDesign name=\"idcard\" size={18} color={colors.primary} />} label='Business Name' placeholder='Business Name' />\n            <FormTextInput icon={<FontAwesome name=\"phone\" size={18} color={colors.primary} />} label='Contact Number' placeholder='Contact Number' />\n            <FormTextInput icon={<FontAwesome name=\"home\" size={18} color={colors.primary} />} label='Address' placeholder='Address' />\n            <AppButton title='UPDATE' onPress={() => { { } }} /> */}\n        </View>\n    );\n}\n\nexport default AccountFormScreen;"]},"metadata":{},"sourceType":"module"}