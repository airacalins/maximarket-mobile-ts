{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useState } from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { AntDesign } from '@expo/vector-icons';\nimport { FontAwesome } from '@expo/vector-icons';\nimport colors from \"../../styles/colors\";\nimport { styles } from \"../../styles/styles\";\nimport FormTextInput from \"../../components/input/FormTextInput\";\nimport * as Yup from 'yup';\nimport { useAppDispatch, useAppSelecter } from \"../../store/configureStore\";\nimport { Formik } from 'formik';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar AccountFormScreen = function AccountFormScreen() {\n  var dispatch = useAppDispatch();\n\n  var _useAppSelecter = useAppSelecter(function (state) {\n    return state.tenant;\n  }),\n      tenant = _useAppSelecter.tenant;\n\n  var _useState = useState({\n    id: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    businessName: \"\",\n    phone: \"\",\n    address: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      tenantInput = _useState2[0],\n      setTenantInput = _useState2[1];\n\n  useEffect(function () {\n    if (!!tenant) setTenantInput({\n      id: tenant.id,\n      firstName: tenant.firstName,\n      lastName: tenant.lastName,\n      businessName: tenant.businessName,\n      phone: tenant.phone,\n      address: tenant.address\n    });\n  }, [tenant]);\n  var validationSchema = Yup.object().shape({\n    firstName: Yup.string().required().label('First name is required.'),\n    lastName: Yup.string().required().label('Last name is required.'),\n    businessName: Yup.string().required().label('Business name is required.'),\n    phone: Yup.string().required().label('Phone is required.'),\n    address: Yup.string().required().label('Address is required.')\n  });\n\n  var _onSubmit = function onSubmit(values) {\n    return _regeneratorRuntime.async(function onSubmit$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(values);\n            Keyboard.dismiss();\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var container = styles.container;\n  return _jsx(View, {\n    style: [container],\n    children: _jsx(Formik, {\n      initialValues: {\n        tenant: tenant\n      },\n      onSubmit: function onSubmit(values) {\n        return _onSubmit(values);\n      },\n      validationSchema: validationSchema,\n      children: function children(_ref) {\n        var handleChange = _ref.handleChange,\n            handleSubmit = _ref.handleSubmit,\n            setFieldTouched = _ref.setFieldTouched,\n            errors = _ref.errors,\n            touched = _ref.touched;\n        return _jsxs(_Fragment, {\n          children: [_jsx(FormTextInput, {\n            icon: _jsx(FontAwesome, {\n              name: \"user\",\n              size: 18,\n              color: colors.primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('firstName');\n            },\n            onChangeText: handleChange('firstName'),\n            label: \"First Name\",\n            placeholder: \"First Name\"\n          }), _jsx(FormTextInput, {\n            icon: _jsx(FontAwesome, {\n              name: \"user\",\n              size: 18,\n              color: colors.primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('lastName');\n            },\n            onChangeText: handleChange('lastName'),\n            label: \"Last Name\",\n            placeholder: \"Last Name\"\n          }), _jsx(FormTextInput, {\n            icon: _jsx(AntDesign, {\n              name: \"idcard\",\n              size: 18,\n              color: colors.primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('businessName');\n            },\n            onChangeText: handleChange('businessName'),\n            label: \"Business Name\",\n            placeholder: \"Business Name\"\n          }), _jsx(FormTextInput, {\n            icon: _jsx(FontAwesome, {\n              name: \"phone\",\n              size: 18,\n              color: colors.primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('phone');\n            },\n            onChangeText: handleChange('phone'),\n            label: \"Phone\",\n            placeholder: \"Phone\"\n          }), _jsx(FormTextInput, {\n            icon: _jsx(FontAwesome, {\n              name: \"home\",\n              size: 18,\n              color: colors.primary\n            }),\n            onBlur: function onBlur() {\n              return setFieldTouched('address');\n            },\n            onChangeText: handleChange('address'),\n            label: \"Address\",\n            placeholder: \"Address\"\n          })]\n        });\n      }\n    })\n  });\n};\n\nexport default AccountFormScreen;","map":{"version":3,"sources":["/Users/airagalias/Documents/GitHub/maximarket-mobile-ts/src/screens/account/AccountFormScreen.tsx"],"names":["React","useEffect","useState","AntDesign","FontAwesome","colors","styles","FormTextInput","Yup","useAppDispatch","useAppSelecter","Formik","AccountFormScreen","dispatch","state","tenant","id","firstName","lastName","businessName","phone","address","tenantInput","setTenantInput","validationSchema","object","shape","string","required","label","onSubmit","values","console","log","Keyboard","dismiss","container","handleChange","handleSubmit","setFieldTouched","errors","touched","primary"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Keyboard, View } from 'react-native';\nimport { AntDesign } from '@expo/vector-icons';\nimport { FontAwesome } from '@expo/vector-icons';\n\nimport colors from '../../styles/colors';\nimport { styles } from '../../styles/styles';\nimport AppButton from '../../components/button/AppButton';\nimport FormTextInput from '../../components/input/FormTextInput';\nimport * as Yup from 'yup';\nimport { useAppDispatch, useAppSelecter } from '../../store/configureStore';\nimport { Formik } from 'formik';\nimport { updateTenantDetailsAsync } from '../../reducers/tenantSlice';\n\nconst AccountFormScreen = () => {\n    const dispatch = useAppDispatch();\n    const { tenant } = useAppSelecter((state) => state.tenant)\n\n    const [tenantInput, setTenantInput] = useState({\n        id: \"\",\n        firstName: \"\",\n        lastName: \"\",\n        businessName: \"\",\n        phone: \"\",\n        address: \"\"\n    });\n\n    useEffect(() => {\n        if (!!tenant) setTenantInput({\n            id: tenant.id,\n            firstName: tenant.firstName,\n            lastName: tenant.lastName,\n            businessName: tenant.businessName,\n            phone: tenant.phone,\n            address: tenant.address\n        })\n    }, [tenant])\n\n    const validationSchema = Yup.object().shape({\n        firstName: Yup.string().required().label('First name is required.'),\n        lastName: Yup.string().required().label('Last name is required.'),\n        businessName: Yup.string().required().label('Business name is required.'),\n        phone: Yup.string().required().label('Phone is required.'),\n        address: Yup.string().required().label('Address is required.'),\n    });\n\n    const onSubmit = async (values: any) => {\n        // await dispatch(updateTenantDetailsAsync(values));\n        console.log(values)\n        Keyboard.dismiss()\n    }\n\n    const { container } = styles\n\n    return (\n        <View style={[container]}>\n\n            <Formik\n                initialValues={{ tenant }}\n                onSubmit={values => onSubmit(values)}\n                validationSchema={validationSchema}\n            >\n                {\n                    ({ handleChange, handleSubmit, setFieldTouched, errors, touched }) => (\n                        <>\n                            <FormTextInput\n                                icon={<FontAwesome name=\"user\" size={18} color={colors.primary} />}\n                                onBlur={() => setFieldTouched('firstName')}\n                                onChangeText={handleChange('firstName')}\n                                label='First Name'\n                                placeholder='First Name'\n                            // errorMessage={touched && errors.firstName}\n                            />\n\n                            <FormTextInput\n                                icon={<FontAwesome name=\"user\" size={18} color={colors.primary} />}\n                                onBlur={() => setFieldTouched('lastName')}\n                                onChangeText={handleChange('lastName')}\n                                label='Last Name'\n                                placeholder='Last Name'\n                            // errorMessage={touched && errors.lastName}\n                            />\n\n                            <FormTextInput\n                                icon={<AntDesign name=\"idcard\" size={18} color={colors.primary} />}\n                                onBlur={() => setFieldTouched('businessName')}\n                                onChangeText={handleChange('businessName')}\n                                label='Business Name'\n                                placeholder='Business Name'\n                            // errorMessage={touched && errors.businessName}\n                            />\n\n                            <FormTextInput\n                                icon={<FontAwesome name=\"phone\" size={18} color={colors.primary} />}\n                                onBlur={() => setFieldTouched('phone')}\n                                onChangeText={handleChange('phone')}\n                                label='Phone'\n                                placeholder='Phone'\n                            // errorMessage={touched && errors.phone}\n                            />\n\n                            <FormTextInput\n                                icon={<FontAwesome name=\"home\" size={18} color={colors.primary} />}\n                                onBlur={() => setFieldTouched('address')}\n                                onChangeText={handleChange('address')}\n                                label='Address'\n                                placeholder='Address'\n                            // errorMessage={touched && errors.address}\n                            />\n                        </>\n                    )\n\n                }\n\n            </Formik>\n\n            {/* <Detail title=\"Status\" value={\n                isActive ?\n                    <View style={[badge, bg_green]} >\n                        <AppText as=\"h5\" bold color={light} italic>Active</AppText>\n                    </View> :\n\n                    <View style={[badge, bg_red]} >\n                        <AppText as=\"h5\" bold color={light} italic>Deativated</AppText>\n                    </View>\n            } /> */}\n            {/* <FormTextInput icon={<FontAwesome name=\"user\" size={18} color={colors.primary} />} label='First Name' placeholder='First Name' />\n            <FormTextInput icon={<FontAwesome name=\"user\" size={18} color={colors.primary} />} label='Last Name' placeholder='Last Name' />\n            <FormTextInput icon={<AntDesign name=\"idcard\" size={18} color={colors.primary} />} label='Business Name' placeholder='Business Name' />\n            <FormTextInput icon={<FontAwesome name=\"phone\" size={18} color={colors.primary} />} label='Contact Number' placeholder='Contact Number' />\n            <FormTextInput icon={<FontAwesome name=\"home\" size={18} color={colors.primary} />} label='Address' placeholder='Address' />\n            <AppButton title='UPDATE' onPress={() => { { } }} /> */}\n        </View>\n    );\n}\n\nexport default AccountFormScreen;"]},"metadata":{},"sourceType":"module"}